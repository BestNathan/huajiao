/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Ack', null, global);
goog.exportSymbol('proto.ChatReq', null, global);
goog.exportSymbol('proto.ChatResp', null, global);
goog.exportSymbol('proto.Error', null, global);
goog.exportSymbol('proto.Ex1QueryUserStatusReq', null, global);
goog.exportSymbol('proto.Ex1QueryUserStatusResp', null, global);
goog.exportSymbol('proto.GetInfoReq', null, global);
goog.exportSymbol('proto.GetInfoResp', null, global);
goog.exportSymbol('proto.GetMultiInfosReq', null, global);
goog.exportSymbol('proto.GetMultiInfosResp', null, global);
goog.exportSymbol('proto.Info', null, global);
goog.exportSymbol('proto.InitLoginReq', null, global);
goog.exportSymbol('proto.InitLoginResp', null, global);
goog.exportSymbol('proto.LoginReq', null, global);
goog.exportSymbol('proto.LoginResp', null, global);
goog.exportSymbol('proto.LogoutReq', null, global);
goog.exportSymbol('proto.LogoutResp', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.NewMessageNotify', null, global);
goog.exportSymbol('proto.Notify', null, global);
goog.exportSymbol('proto.Pair', null, global);
goog.exportSymbol('proto.Proxy', null, global);
goog.exportSymbol('proto.ReConnectNotify', null, global);
goog.exportSymbol('proto.ReLoginNotify', null, global);
goog.exportSymbol('proto.ReqEQ1User', null, global);
goog.exportSymbol('proto.Request', null, global);
goog.exportSymbol('proto.RespEQ1User', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.RouteInfo', null, global);
goog.exportSymbol('proto.Service_Req', null, global);
goog.exportSymbol('proto.Service_Resp', null, global);
goog.exportSymbol('proto.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Pair.displayName = 'proto.Pair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pair}
 */
proto.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pair;
  return proto.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pair}
 */
proto.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Pair.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.Pair.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * required bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.Pair.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Pair.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Pair.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Pair.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Pair.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.Pair.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.Pair.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.Pair.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Pair.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Pair.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Error.displayName = 'proto.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    description: msg.getDescription_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Error;
  return proto.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.Error.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Error.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Error.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Error.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes description = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Error.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes description = 2;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.Error.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.Error.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.Error.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Error.prototype.clearDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Error.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.User.repeatedFields_, null);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.User.displayName = 'proto.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.User.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    propertyPairsList: jspb.Message.toObjectList(msg.getPropertyPairsList(),
    proto.Pair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User;
  return proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.Pair;
      reader.readMessage(value,proto.Pair.deserializeBinaryFromReader);
      msg.addPropertyPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertyPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Pair.serializeBinaryToWriter
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.User.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.User.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.User.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.User.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Pair property_pairs = 2;
 * @return {!Array.<!proto.Pair>}
 */
proto.User.prototype.getPropertyPairsList = function() {
  return /** @type{!Array.<!proto.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Pair, 2));
};


/** @param {!Array.<!proto.Pair>} value */
proto.User.prototype.setPropertyPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Pair}
 */
proto.User.prototype.addPropertyPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Pair, opt_index);
};


proto.User.prototype.clearPropertyPairsList = function() {
  this.setPropertyPairsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Info.repeatedFields_, null);
};
goog.inherits(proto.Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Info.displayName = 'proto.Info';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Info.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Info.prototype.toObject = function(opt_includeInstance) {
  return proto.Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertyPairsList: jspb.Message.toObjectList(msg.getPropertyPairsList(),
    proto.Pair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Info}
 */
proto.Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Info;
  return proto.Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Info}
 */
proto.Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Pair;
      reader.readMessage(value,proto.Pair.deserializeBinaryFromReader);
      msg.addPropertyPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertyPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Pair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pair property_pairs = 1;
 * @return {!Array.<!proto.Pair>}
 */
proto.Info.prototype.getPropertyPairsList = function() {
  return /** @type{!Array.<!proto.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Pair, 1));
};


/** @param {!Array.<!proto.Pair>} value */
proto.Info.prototype.setPropertyPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Pair}
 */
proto.Info.prototype.addPropertyPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Pair, opt_index);
};


proto.Info.prototype.clearPropertyPairsList = function() {
  this.setPropertyPairsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginReq.displayName = 'proto.LoginReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    mobileType: jspb.Message.getField(msg, 1),
    netType: jspb.Message.getField(msg, 2),
    serverRam: jspb.Message.getField(msg, 3),
    secretRam: msg.getSecretRam_asB64(),
    appId: jspb.Message.getFieldWithDefault(msg, 5, 2000),
    heartFeq: jspb.Message.getFieldWithDefault(msg, 6, 300),
    deviceid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    platform: jspb.Message.getField(msg, 8),
    verfCode: jspb.Message.getField(msg, 9),
    notEncrypt: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginReq}
 */
proto.LoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginReq;
  return proto.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginReq}
 */
proto.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobileType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerRam(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretRam(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeartFeq(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerfCode(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotEncrypt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * required string mobile_type = 1;
 * @return {string}
 */
proto.LoginReq.prototype.getMobileType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LoginReq.prototype.setMobileType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LoginReq.prototype.clearMobileType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasMobileType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 net_type = 2;
 * @return {number}
 */
proto.LoginReq.prototype.getNetType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LoginReq.prototype.setNetType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.LoginReq.prototype.clearNetType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasNetType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string server_ram = 3;
 * @return {string}
 */
proto.LoginReq.prototype.getServerRam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LoginReq.prototype.setServerRam = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.LoginReq.prototype.clearServerRam = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasServerRam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes secret_ram = 4;
 * @return {!(string|Uint8Array)}
 */
proto.LoginReq.prototype.getSecretRam = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes secret_ram = 4;
 * This is a type-conversion wrapper around `getSecretRam()`
 * @return {string}
 */
proto.LoginReq.prototype.getSecretRam_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretRam()));
};


/**
 * optional bytes secret_ram = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretRam()`
 * @return {!Uint8Array}
 */
proto.LoginReq.prototype.getSecretRam_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretRam()));
};


/** @param {!(string|Uint8Array)} value */
proto.LoginReq.prototype.setSecretRam = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.LoginReq.prototype.clearSecretRam = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasSecretRam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 app_id = 5;
 * @return {number}
 */
proto.LoginReq.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 2000));
};


/** @param {number} value */
proto.LoginReq.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.LoginReq.prototype.clearAppId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasAppId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 heart_feq = 6;
 * @return {number}
 */
proto.LoginReq.prototype.getHeartFeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 300));
};


/** @param {number} value */
proto.LoginReq.prototype.setHeartFeq = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.LoginReq.prototype.clearHeartFeq = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasHeartFeq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string deviceid = 7;
 * @return {string}
 */
proto.LoginReq.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.LoginReq.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.LoginReq.prototype.clearDeviceid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string platform = 8;
 * @return {string}
 */
proto.LoginReq.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.LoginReq.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.LoginReq.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string verf_code = 9;
 * @return {string}
 */
proto.LoginReq.prototype.getVerfCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.LoginReq.prototype.setVerfCode = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.LoginReq.prototype.clearVerfCode = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasVerfCode = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool not_encrypt = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.LoginReq.prototype.getNotEncrypt = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.LoginReq.prototype.setNotEncrypt = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.LoginReq.prototype.clearNotEncrypt = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginReq.prototype.hasNotEncrypt = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginResp.displayName = 'proto.LoginResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginResp.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getField(msg, 1),
    sessionId: jspb.Message.getField(msg, 2),
    sessionKey: jspb.Message.getField(msg, 3),
    clientLoginIp: jspb.Message.getField(msg, 4),
    serverip: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginResp}
 */
proto.LoginResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginResp;
  return proto.LoginResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginResp}
 */
proto.LoginResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientLoginIp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required uint32 timestamp = 1;
 * @return {number}
 */
proto.LoginResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LoginResp.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LoginResp.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginResp.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string session_id = 2;
 * @return {string}
 */
proto.LoginResp.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LoginResp.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.LoginResp.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginResp.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string session_key = 3;
 * @return {string}
 */
proto.LoginResp.prototype.getSessionKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.LoginResp.prototype.setSessionKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.LoginResp.prototype.clearSessionKey = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginResp.prototype.hasSessionKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string client_login_ip = 4;
 * @return {string}
 */
proto.LoginResp.prototype.getClientLoginIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.LoginResp.prototype.setClientLoginIp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.LoginResp.prototype.clearClientLoginIp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginResp.prototype.hasClientLoginIp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string serverip = 5;
 * @return {string}
 */
proto.LoginResp.prototype.getServerip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.LoginResp.prototype.setServerip = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.LoginResp.prototype.clearServerip = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginResp.prototype.hasServerip = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatReq.displayName = 'proto.ChatReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64(),
    bodyId: jspb.Message.getField(msg, 2),
    moreFlag: jspb.Message.getField(msg, 3),
    bodyType: jspb.Message.getField(msg, 4),
    store: jspb.Message.getField(msg, 5),
    mParameter: msg.getMParameter_asB64(),
    serviceId: jspb.Message.getField(msg, 7),
    sParameter: msg.getSParameter_asB64(),
    expireTime: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatReq}
 */
proto.ChatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatReq;
  return proto.ChatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatReq}
 */
proto.ChatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMoreFlag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStore(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMParameter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceId(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSParameter(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpireTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * required bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChatReq.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.ChatReq.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * required bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.ChatReq.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatReq.prototype.setBody = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatReq.prototype.clearBody = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 body_id = 2;
 * @return {number}
 */
proto.ChatReq.prototype.getBodyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChatReq.prototype.setBodyId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatReq.prototype.clearBodyId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasBodyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 more_flag = 3;
 * @return {number}
 */
proto.ChatReq.prototype.getMoreFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatReq.prototype.setMoreFlag = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatReq.prototype.clearMoreFlag = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasMoreFlag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 body_type = 4;
 * @return {number}
 */
proto.ChatReq.prototype.getBodyType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ChatReq.prototype.setBodyType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatReq.prototype.clearBodyType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasBodyType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool store = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ChatReq.prototype.getStore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ChatReq.prototype.setStore = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChatReq.prototype.clearStore = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasStore = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes m_parameter = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ChatReq.prototype.getMParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes m_parameter = 6;
 * This is a type-conversion wrapper around `getMParameter()`
 * @return {string}
 */
proto.ChatReq.prototype.getMParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMParameter()));
};


/**
 * optional bytes m_parameter = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMParameter()`
 * @return {!Uint8Array}
 */
proto.ChatReq.prototype.getMParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatReq.prototype.setMParameter = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatReq.prototype.clearMParameter = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasMParameter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 service_id = 7;
 * @return {number}
 */
proto.ChatReq.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ChatReq.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ChatReq.prototype.clearServiceId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasServiceId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes s_parameter = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ChatReq.prototype.getSParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes s_parameter = 8;
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {string}
 */
proto.ChatReq.prototype.getSParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSParameter()));
};


/**
 * optional bytes s_parameter = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {!Uint8Array}
 */
proto.ChatReq.prototype.getSParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatReq.prototype.setSParameter = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.ChatReq.prototype.clearSParameter = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasSParameter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 expire_time = 12;
 * @return {number}
 */
proto.ChatReq.prototype.getExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ChatReq.prototype.setExpireTime = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.ChatReq.prototype.clearExpireTime = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatReq.prototype.hasExpireTime = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatResp.displayName = 'proto.ChatResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1),
    bodyId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatResp}
 */
proto.ChatResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatResp;
  return proto.ChatResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatResp}
 */
proto.ChatResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint32 result = 1;
 * @return {number}
 */
proto.ChatResp.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatResp.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatResp.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatResp.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 body_id = 2;
 * @return {number}
 */
proto.ChatResp.prototype.getBodyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChatResp.prototype.setBodyId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatResp.prototype.clearBodyId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatResp.prototype.hasBodyId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetInfoReq.displayName = 'proto.GetInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoType: jspb.Message.getField(msg, 1),
    getInfoId: jspb.Message.getField(msg, 2),
    getInfoOffset: jspb.Message.getField(msg, 3),
    sParameter: msg.getSParameter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetInfoReq}
 */
proto.GetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetInfoReq;
  return proto.GetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetInfoReq}
 */
proto.GetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGetInfoId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGetInfoOffset(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required string info_type = 1;
 * @return {string}
 */
proto.GetInfoReq.prototype.getInfoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetInfoReq.prototype.setInfoType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GetInfoReq.prototype.clearInfoType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoReq.prototype.hasInfoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 get_info_id = 2;
 * @return {number}
 */
proto.GetInfoReq.prototype.getGetInfoId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GetInfoReq.prototype.setGetInfoId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GetInfoReq.prototype.clearGetInfoId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoReq.prototype.hasGetInfoId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 get_info_offset = 3;
 * @return {number}
 */
proto.GetInfoReq.prototype.getGetInfoOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GetInfoReq.prototype.setGetInfoOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetInfoReq.prototype.clearGetInfoOffset = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoReq.prototype.hasGetInfoOffset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes s_parameter = 4;
 * @return {!(string|Uint8Array)}
 */
proto.GetInfoReq.prototype.getSParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes s_parameter = 4;
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {string}
 */
proto.GetInfoReq.prototype.getSParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSParameter()));
};


/**
 * optional bytes s_parameter = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {!Uint8Array}
 */
proto.GetInfoReq.prototype.getSParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.GetInfoReq.prototype.setSParameter = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GetInfoReq.prototype.clearSParameter = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoReq.prototype.hasSParameter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetInfoResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetInfoResp.repeatedFields_, null);
};
goog.inherits(proto.GetInfoResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetInfoResp.displayName = 'proto.GetInfoResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetInfoResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetInfoResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GetInfoResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetInfoResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInfoResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoType: jspb.Message.getField(msg, 1),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.Info.toObject, includeInstance),
    lastInfoId: jspb.Message.getField(msg, 3),
    sParameter: msg.getSParameter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetInfoResp}
 */
proto.GetInfoResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetInfoResp;
  return proto.GetInfoResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetInfoResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetInfoResp}
 */
proto.GetInfoResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoType(value);
      break;
    case 2:
      var value = new proto.Info;
      reader.readMessage(value,proto.Info.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastInfoId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetInfoResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetInfoResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetInfoResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetInfoResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Info.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required string info_type = 1;
 * @return {string}
 */
proto.GetInfoResp.prototype.getInfoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetInfoResp.prototype.setInfoType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GetInfoResp.prototype.clearInfoType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoResp.prototype.hasInfoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Info infos = 2;
 * @return {!Array.<!proto.Info>}
 */
proto.GetInfoResp.prototype.getInfosList = function() {
  return /** @type{!Array.<!proto.Info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Info, 2));
};


/** @param {!Array.<!proto.Info>} value */
proto.GetInfoResp.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Info}
 */
proto.GetInfoResp.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Info, opt_index);
};


proto.GetInfoResp.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


/**
 * optional int64 last_info_id = 3;
 * @return {number}
 */
proto.GetInfoResp.prototype.getLastInfoId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GetInfoResp.prototype.setLastInfoId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetInfoResp.prototype.clearLastInfoId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoResp.prototype.hasLastInfoId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes s_parameter = 4;
 * @return {!(string|Uint8Array)}
 */
proto.GetInfoResp.prototype.getSParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes s_parameter = 4;
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {string}
 */
proto.GetInfoResp.prototype.getSParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSParameter()));
};


/**
 * optional bytes s_parameter = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {!Uint8Array}
 */
proto.GetInfoResp.prototype.getSParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.GetInfoResp.prototype.setSParameter = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GetInfoResp.prototype.clearSParameter = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetInfoResp.prototype.hasSParameter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMultiInfosReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMultiInfosReq.repeatedFields_, null);
};
goog.inherits(proto.GetMultiInfosReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMultiInfosReq.displayName = 'proto.GetMultiInfosReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMultiInfosReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMultiInfosReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMultiInfosReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMultiInfosReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMultiInfosReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoType: jspb.Message.getField(msg, 1),
    getInfoIdsList: jspb.Message.getRepeatedField(msg, 2),
    sParameter: msg.getSParameter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMultiInfosReq}
 */
proto.GetMultiInfosReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMultiInfosReq;
  return proto.GetMultiInfosReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMultiInfosReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMultiInfosReq}
 */
proto.GetMultiInfosReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addGetInfoIds(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMultiInfosReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetMultiInfosReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetMultiInfosReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMultiInfosReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGetInfoIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required string info_type = 1;
 * @return {string}
 */
proto.GetMultiInfosReq.prototype.getInfoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetMultiInfosReq.prototype.setInfoType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GetMultiInfosReq.prototype.clearInfoType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetMultiInfosReq.prototype.hasInfoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 get_info_ids = 2;
 * @return {!Array.<number>}
 */
proto.GetMultiInfosReq.prototype.getGetInfoIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.GetMultiInfosReq.prototype.setGetInfoIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.GetMultiInfosReq.prototype.addGetInfoIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.GetMultiInfosReq.prototype.clearGetInfoIdsList = function() {
  this.setGetInfoIdsList([]);
};


/**
 * optional bytes s_parameter = 3;
 * @return {!(string|Uint8Array)}
 */
proto.GetMultiInfosReq.prototype.getSParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes s_parameter = 3;
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {string}
 */
proto.GetMultiInfosReq.prototype.getSParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSParameter()));
};


/**
 * optional bytes s_parameter = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {!Uint8Array}
 */
proto.GetMultiInfosReq.prototype.getSParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.GetMultiInfosReq.prototype.setSParameter = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetMultiInfosReq.prototype.clearSParameter = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetMultiInfosReq.prototype.hasSParameter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMultiInfosResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMultiInfosResp.repeatedFields_, null);
};
goog.inherits(proto.GetMultiInfosResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMultiInfosResp.displayName = 'proto.GetMultiInfosResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMultiInfosResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMultiInfosResp.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMultiInfosResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMultiInfosResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMultiInfosResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoType: jspb.Message.getField(msg, 1),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.Info.toObject, includeInstance),
    lastInfoId: jspb.Message.getField(msg, 3),
    sParameter: msg.getSParameter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMultiInfosResp}
 */
proto.GetMultiInfosResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMultiInfosResp;
  return proto.GetMultiInfosResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMultiInfosResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMultiInfosResp}
 */
proto.GetMultiInfosResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoType(value);
      break;
    case 2:
      var value = new proto.Info;
      reader.readMessage(value,proto.Info.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastInfoId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMultiInfosResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetMultiInfosResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetMultiInfosResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMultiInfosResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Info.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required string info_type = 1;
 * @return {string}
 */
proto.GetMultiInfosResp.prototype.getInfoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetMultiInfosResp.prototype.setInfoType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GetMultiInfosResp.prototype.clearInfoType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetMultiInfosResp.prototype.hasInfoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Info infos = 2;
 * @return {!Array.<!proto.Info>}
 */
proto.GetMultiInfosResp.prototype.getInfosList = function() {
  return /** @type{!Array.<!proto.Info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Info, 2));
};


/** @param {!Array.<!proto.Info>} value */
proto.GetMultiInfosResp.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Info}
 */
proto.GetMultiInfosResp.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Info, opt_index);
};


proto.GetMultiInfosResp.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


/**
 * optional int64 last_info_id = 3;
 * @return {number}
 */
proto.GetMultiInfosResp.prototype.getLastInfoId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GetMultiInfosResp.prototype.setLastInfoId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetMultiInfosResp.prototype.clearLastInfoId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetMultiInfosResp.prototype.hasLastInfoId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes s_parameter = 4;
 * @return {!(string|Uint8Array)}
 */
proto.GetMultiInfosResp.prototype.getSParameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes s_parameter = 4;
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {string}
 */
proto.GetMultiInfosResp.prototype.getSParameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSParameter()));
};


/**
 * optional bytes s_parameter = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSParameter()`
 * @return {!Uint8Array}
 */
proto.GetMultiInfosResp.prototype.getSParameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSParameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.GetMultiInfosResp.prototype.setSParameter = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GetMultiInfosResp.prototype.clearSParameter = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetMultiInfosResp.prototype.hasSParameter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogoutReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LogoutReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LogoutReq.displayName = 'proto.LogoutReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogoutReq.prototype.toObject = function(opt_includeInstance) {
  return proto.LogoutReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogoutReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogoutReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogoutReq}
 */
proto.LogoutReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogoutReq;
  return proto.LogoutReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogoutReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogoutReq}
 */
proto.LogoutReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogoutReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LogoutReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LogoutReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogoutReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.LogoutReq.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LogoutReq.prototype.setReason = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LogoutReq.prototype.clearReason = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LogoutReq.prototype.hasReason = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogoutResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LogoutResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LogoutResp.displayName = 'proto.LogoutResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogoutResp.prototype.toObject = function(opt_includeInstance) {
  return proto.LogoutResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogoutResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogoutResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogoutResp}
 */
proto.LogoutResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogoutResp;
  return proto.LogoutResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogoutResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogoutResp}
 */
proto.LogoutResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogoutResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LogoutResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LogoutResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LogoutResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 result = 1;
 * @return {number}
 */
proto.LogoutResp.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LogoutResp.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LogoutResp.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LogoutResp.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitLoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InitLoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InitLoginReq.displayName = 'proto.InitLoginReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitLoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.InitLoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitLoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitLoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientRam: jspb.Message.getField(msg, 1),
    sig: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitLoginReq}
 */
proto.InitLoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitLoginReq;
  return proto.InitLoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitLoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitLoginReq}
 */
proto.InitLoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientRam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitLoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitLoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitLoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitLoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string client_ram = 1;
 * @return {string}
 */
proto.InitLoginReq.prototype.getClientRam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.InitLoginReq.prototype.setClientRam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.InitLoginReq.prototype.clearClientRam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InitLoginReq.prototype.hasClientRam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sig = 2;
 * @return {string}
 */
proto.InitLoginReq.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.InitLoginReq.prototype.setSig = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.InitLoginReq.prototype.clearSig = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InitLoginReq.prototype.hasSig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InitLoginResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InitLoginResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InitLoginResp.displayName = 'proto.InitLoginResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InitLoginResp.prototype.toObject = function(opt_includeInstance) {
  return proto.InitLoginResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InitLoginResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitLoginResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientRam: jspb.Message.getField(msg, 1),
    serverRam: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InitLoginResp}
 */
proto.InitLoginResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InitLoginResp;
  return proto.InitLoginResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InitLoginResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InitLoginResp}
 */
proto.InitLoginResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientRam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerRam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InitLoginResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InitLoginResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InitLoginResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InitLoginResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string client_ram = 1;
 * @return {string}
 */
proto.InitLoginResp.prototype.getClientRam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.InitLoginResp.prototype.setClientRam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.InitLoginResp.prototype.clearClientRam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InitLoginResp.prototype.hasClientRam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string server_ram = 2;
 * @return {string}
 */
proto.InitLoginResp.prototype.getServerRam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.InitLoginResp.prototype.setServerRam = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.InitLoginResp.prototype.clearServerRam = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InitLoginResp.prototype.hasServerRam = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Service_Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Service_Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Service_Req.displayName = 'proto.Service_Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Service_Req.prototype.toObject = function(opt_includeInstance) {
  return proto.Service_Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Service_Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service_Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceId: jspb.Message.getField(msg, 1),
    request: msg.getRequest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Service_Req}
 */
proto.Service_Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Service_Req;
  return proto.Service_Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Service_Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Service_Req}
 */
proto.Service_Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Service_Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Service_Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Service_Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service_Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required uint32 service_id = 1;
 * @return {number}
 */
proto.Service_Req.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Service_Req.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Service_Req.prototype.clearServiceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Service_Req.prototype.hasServiceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes request = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Service_Req.prototype.getRequest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes request = 2;
 * This is a type-conversion wrapper around `getRequest()`
 * @return {string}
 */
proto.Service_Req.prototype.getRequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequest()));
};


/**
 * required bytes request = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequest()`
 * @return {!Uint8Array}
 */
proto.Service_Req.prototype.getRequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequest()));
};


/** @param {!(string|Uint8Array)} value */
proto.Service_Req.prototype.setRequest = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Service_Req.prototype.clearRequest = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Service_Req.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Service_Resp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Service_Resp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Service_Resp.displayName = 'proto.Service_Resp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Service_Resp.prototype.toObject = function(opt_includeInstance) {
  return proto.Service_Resp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Service_Resp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service_Resp.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceId: jspb.Message.getField(msg, 1),
    response: msg.getResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Service_Resp}
 */
proto.Service_Resp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Service_Resp;
  return proto.Service_Resp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Service_Resp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Service_Resp}
 */
proto.Service_Resp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Service_Resp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Service_Resp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Service_Resp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service_Resp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required uint32 service_id = 1;
 * @return {number}
 */
proto.Service_Resp.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Service_Resp.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Service_Resp.prototype.clearServiceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Service_Resp.prototype.hasServiceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes response = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Service_Resp.prototype.getResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes response = 2;
 * This is a type-conversion wrapper around `getResponse()`
 * @return {string}
 */
proto.Service_Resp.prototype.getResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponse()));
};


/**
 * required bytes response = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponse()`
 * @return {!Uint8Array}
 */
proto.Service_Resp.prototype.getResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponse()));
};


/** @param {!(string|Uint8Array)} value */
proto.Service_Resp.prototype.setResponse = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Service_Resp.prototype.clearResponse = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Service_Resp.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReqEQ1User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReqEQ1User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReqEQ1User.displayName = 'proto.ReqEQ1User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReqEQ1User.prototype.toObject = function(opt_includeInstance) {
  return proto.ReqEQ1User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReqEQ1User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqEQ1User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    userType: jspb.Message.getField(msg, 2),
    appId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReqEQ1User}
 */
proto.ReqEQ1User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReqEQ1User;
  return proto.ReqEQ1User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReqEQ1User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReqEQ1User}
 */
proto.ReqEQ1User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReqEQ1User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReqEQ1User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReqEQ1User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqEQ1User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.ReqEQ1User.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReqEQ1User.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ReqEQ1User.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReqEQ1User.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string user_type = 2;
 * @return {string}
 */
proto.ReqEQ1User.prototype.getUserType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ReqEQ1User.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ReqEQ1User.prototype.clearUserType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReqEQ1User.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 app_id = 3;
 * @return {number}
 */
proto.ReqEQ1User.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ReqEQ1User.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ReqEQ1User.prototype.clearAppId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReqEQ1User.prototype.hasAppId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RespEQ1User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RespEQ1User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RespEQ1User.displayName = 'proto.RespEQ1User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RespEQ1User.prototype.toObject = function(opt_includeInstance) {
  return proto.RespEQ1User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RespEQ1User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespEQ1User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    userType: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    jid: jspb.Message.getField(msg, 4),
    appId: jspb.Message.getField(msg, 5),
    platform: jspb.Message.getField(msg, 6),
    mobileType: jspb.Message.getField(msg, 7),
    clientVer: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RespEQ1User}
 */
proto.RespEQ1User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RespEQ1User;
  return proto.RespEQ1User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RespEQ1User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RespEQ1User}
 */
proto.RespEQ1User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobileType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientVer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RespEQ1User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RespEQ1User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RespEQ1User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RespEQ1User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required string userid = 1;
 * @return {string}
 */
proto.RespEQ1User.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RespEQ1User.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RespEQ1User.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string user_type = 2;
 * @return {string}
 */
proto.RespEQ1User.prototype.getUserType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RespEQ1User.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RespEQ1User.prototype.clearUserType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 status = 3;
 * @return {number}
 */
proto.RespEQ1User.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.RespEQ1User.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RespEQ1User.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string jid = 4;
 * @return {string}
 */
proto.RespEQ1User.prototype.getJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RespEQ1User.prototype.setJid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.RespEQ1User.prototype.clearJid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasJid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 app_id = 5;
 * @return {number}
 */
proto.RespEQ1User.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.RespEQ1User.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.RespEQ1User.prototype.clearAppId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasAppId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string platform = 6;
 * @return {string}
 */
proto.RespEQ1User.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.RespEQ1User.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.RespEQ1User.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string mobile_type = 7;
 * @return {string}
 */
proto.RespEQ1User.prototype.getMobileType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RespEQ1User.prototype.setMobileType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.RespEQ1User.prototype.clearMobileType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasMobileType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 client_ver = 8;
 * @return {number}
 */
proto.RespEQ1User.prototype.getClientVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.RespEQ1User.prototype.setClientVer = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.RespEQ1User.prototype.clearClientVer = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RespEQ1User.prototype.hasClientVer = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ex1QueryUserStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Ex1QueryUserStatusReq.repeatedFields_, null);
};
goog.inherits(proto.Ex1QueryUserStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ex1QueryUserStatusReq.displayName = 'proto.Ex1QueryUserStatusReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Ex1QueryUserStatusReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ex1QueryUserStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Ex1QueryUserStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ex1QueryUserStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ex1QueryUserStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userListList: jspb.Message.toObjectList(msg.getUserListList(),
    proto.ReqEQ1User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ex1QueryUserStatusReq}
 */
proto.Ex1QueryUserStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ex1QueryUserStatusReq;
  return proto.Ex1QueryUserStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ex1QueryUserStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ex1QueryUserStatusReq}
 */
proto.Ex1QueryUserStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReqEQ1User;
      reader.readMessage(value,proto.ReqEQ1User.deserializeBinaryFromReader);
      msg.addUserList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ex1QueryUserStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ex1QueryUserStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ex1QueryUserStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ex1QueryUserStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReqEQ1User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReqEQ1User user_list = 1;
 * @return {!Array.<!proto.ReqEQ1User>}
 */
proto.Ex1QueryUserStatusReq.prototype.getUserListList = function() {
  return /** @type{!Array.<!proto.ReqEQ1User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReqEQ1User, 1));
};


/** @param {!Array.<!proto.ReqEQ1User>} value */
proto.Ex1QueryUserStatusReq.prototype.setUserListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReqEQ1User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReqEQ1User}
 */
proto.Ex1QueryUserStatusReq.prototype.addUserList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReqEQ1User, opt_index);
};


proto.Ex1QueryUserStatusReq.prototype.clearUserListList = function() {
  this.setUserListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ex1QueryUserStatusResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Ex1QueryUserStatusResp.repeatedFields_, null);
};
goog.inherits(proto.Ex1QueryUserStatusResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ex1QueryUserStatusResp.displayName = 'proto.Ex1QueryUserStatusResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Ex1QueryUserStatusResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ex1QueryUserStatusResp.prototype.toObject = function(opt_includeInstance) {
  return proto.Ex1QueryUserStatusResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ex1QueryUserStatusResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ex1QueryUserStatusResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userListList: jspb.Message.toObjectList(msg.getUserListList(),
    proto.RespEQ1User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ex1QueryUserStatusResp}
 */
proto.Ex1QueryUserStatusResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ex1QueryUserStatusResp;
  return proto.Ex1QueryUserStatusResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ex1QueryUserStatusResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ex1QueryUserStatusResp}
 */
proto.Ex1QueryUserStatusResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RespEQ1User;
      reader.readMessage(value,proto.RespEQ1User.deserializeBinaryFromReader);
      msg.addUserList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ex1QueryUserStatusResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ex1QueryUserStatusResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ex1QueryUserStatusResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ex1QueryUserStatusResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RespEQ1User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RespEQ1User user_list = 1;
 * @return {!Array.<!proto.RespEQ1User>}
 */
proto.Ex1QueryUserStatusResp.prototype.getUserListList = function() {
  return /** @type{!Array.<!proto.RespEQ1User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RespEQ1User, 1));
};


/** @param {!Array.<!proto.RespEQ1User>} value */
proto.Ex1QueryUserStatusResp.prototype.setUserListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RespEQ1User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RespEQ1User}
 */
proto.Ex1QueryUserStatusResp.prototype.addUserList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RespEQ1User, opt_index);
};


proto.Ex1QueryUserStatusResp.prototype.clearUserListList = function() {
  this.setUserListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.displayName = 'proto.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: (f = msg.getLogin()) && proto.LoginReq.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.ChatReq.toObject(includeInstance, f),
    getInfo: (f = msg.getGetInfo()) && proto.GetInfoReq.toObject(includeInstance, f),
    logout: (f = msg.getLogout()) && proto.LogoutReq.toObject(includeInstance, f),
    initLoginReq: (f = msg.getInitLoginReq()) && proto.InitLoginReq.toObject(includeInstance, f),
    serviceReq: (f = msg.getServiceReq()) && proto.Service_Req.toObject(includeInstance, f),
    e1QueryUser: (f = msg.getE1QueryUser()) && proto.Ex1QueryUserStatusReq.toObject(includeInstance, f),
    getMultiInfos: (f = msg.getGetMultiInfos()) && proto.GetMultiInfosReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.LoginReq;
      reader.readMessage(value,proto.LoginReq.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 3:
      var value = new proto.ChatReq;
      reader.readMessage(value,proto.ChatReq.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    case 5:
      var value = new proto.GetInfoReq;
      reader.readMessage(value,proto.GetInfoReq.deserializeBinaryFromReader);
      msg.setGetInfo(value);
      break;
    case 6:
      var value = new proto.LogoutReq;
      reader.readMessage(value,proto.LogoutReq.deserializeBinaryFromReader);
      msg.setLogout(value);
      break;
    case 9:
      var value = new proto.InitLoginReq;
      reader.readMessage(value,proto.InitLoginReq.deserializeBinaryFromReader);
      msg.setInitLoginReq(value);
      break;
    case 11:
      var value = new proto.Service_Req;
      reader.readMessage(value,proto.Service_Req.deserializeBinaryFromReader);
      msg.setServiceReq(value);
      break;
    case 12:
      var value = new proto.Ex1QueryUserStatusReq;
      reader.readMessage(value,proto.Ex1QueryUserStatusReq.deserializeBinaryFromReader);
      msg.setE1QueryUser(value);
      break;
    case 100:
      var value = new proto.GetMultiInfosReq;
      reader.readMessage(value,proto.GetMultiInfosReq.deserializeBinaryFromReader);
      msg.setGetMultiInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LoginReq.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ChatReq.serializeBinaryToWriter
    );
  }
  f = message.getGetInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GetInfoReq.serializeBinaryToWriter
    );
  }
  f = message.getLogout();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.LogoutReq.serializeBinaryToWriter
    );
  }
  f = message.getInitLoginReq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.InitLoginReq.serializeBinaryToWriter
    );
  }
  f = message.getServiceReq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Service_Req.serializeBinaryToWriter
    );
  }
  f = message.getE1QueryUser();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Ex1QueryUserStatusReq.serializeBinaryToWriter
    );
  }
  f = message.getGetMultiInfos();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.GetMultiInfosReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional LoginReq login = 2;
 * @return {?proto.LoginReq}
 */
proto.Request.prototype.getLogin = function() {
  return /** @type{?proto.LoginReq} */ (
    jspb.Message.getWrapperField(this, proto.LoginReq, 2));
};


/** @param {?proto.LoginReq|undefined} value */
proto.Request.prototype.setLogin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Request.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChatReq chat = 3;
 * @return {?proto.ChatReq}
 */
proto.Request.prototype.getChat = function() {
  return /** @type{?proto.ChatReq} */ (
    jspb.Message.getWrapperField(this, proto.ChatReq, 3));
};


/** @param {?proto.ChatReq|undefined} value */
proto.Request.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Request.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasChat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetInfoReq get_info = 5;
 * @return {?proto.GetInfoReq}
 */
proto.Request.prototype.getGetInfo = function() {
  return /** @type{?proto.GetInfoReq} */ (
    jspb.Message.getWrapperField(this, proto.GetInfoReq, 5));
};


/** @param {?proto.GetInfoReq|undefined} value */
proto.Request.prototype.setGetInfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Request.prototype.clearGetInfo = function() {
  this.setGetInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasGetInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LogoutReq logout = 6;
 * @return {?proto.LogoutReq}
 */
proto.Request.prototype.getLogout = function() {
  return /** @type{?proto.LogoutReq} */ (
    jspb.Message.getWrapperField(this, proto.LogoutReq, 6));
};


/** @param {?proto.LogoutReq|undefined} value */
proto.Request.prototype.setLogout = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Request.prototype.clearLogout = function() {
  this.setLogout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasLogout = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InitLoginReq init_login_req = 9;
 * @return {?proto.InitLoginReq}
 */
proto.Request.prototype.getInitLoginReq = function() {
  return /** @type{?proto.InitLoginReq} */ (
    jspb.Message.getWrapperField(this, proto.InitLoginReq, 9));
};


/** @param {?proto.InitLoginReq|undefined} value */
proto.Request.prototype.setInitLoginReq = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Request.prototype.clearInitLoginReq = function() {
  this.setInitLoginReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasInitLoginReq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Service_Req service_req = 11;
 * @return {?proto.Service_Req}
 */
proto.Request.prototype.getServiceReq = function() {
  return /** @type{?proto.Service_Req} */ (
    jspb.Message.getWrapperField(this, proto.Service_Req, 11));
};


/** @param {?proto.Service_Req|undefined} value */
proto.Request.prototype.setServiceReq = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.Request.prototype.clearServiceReq = function() {
  this.setServiceReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasServiceReq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Ex1QueryUserStatusReq e1_query_user = 12;
 * @return {?proto.Ex1QueryUserStatusReq}
 */
proto.Request.prototype.getE1QueryUser = function() {
  return /** @type{?proto.Ex1QueryUserStatusReq} */ (
    jspb.Message.getWrapperField(this, proto.Ex1QueryUserStatusReq, 12));
};


/** @param {?proto.Ex1QueryUserStatusReq|undefined} value */
proto.Request.prototype.setE1QueryUser = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.Request.prototype.clearE1QueryUser = function() {
  this.setE1QueryUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasE1QueryUser = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional GetMultiInfosReq get_multi_infos = 100;
 * @return {?proto.GetMultiInfosReq}
 */
proto.Request.prototype.getGetMultiInfos = function() {
  return /** @type{?proto.GetMultiInfosReq} */ (
    jspb.Message.getWrapperField(this, proto.GetMultiInfosReq, 100));
};


/** @param {?proto.GetMultiInfosReq|undefined} value */
proto.Request.prototype.setGetMultiInfos = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.Request.prototype.clearGetMultiInfos = function() {
  this.setGetMultiInfos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Request.prototype.hasGetMultiInfos = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.displayName = 'proto.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.Error.toObject(includeInstance, f),
    login: (f = msg.getLogin()) && proto.LoginResp.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.ChatResp.toObject(includeInstance, f),
    getInfo: (f = msg.getGetInfo()) && proto.GetInfoResp.toObject(includeInstance, f),
    logout: (f = msg.getLogout()) && proto.LogoutResp.toObject(includeInstance, f),
    initLoginResp: (f = msg.getInitLoginResp()) && proto.InitLoginResp.toObject(includeInstance, f),
    serviceResp: (f = msg.getServiceResp()) && proto.Service_Resp.toObject(includeInstance, f),
    e1QueryUser: (f = msg.getE1QueryUser()) && proto.Ex1QueryUserStatusResp.toObject(includeInstance, f),
    getMultiInfos: (f = msg.getGetMultiInfos()) && proto.GetMultiInfosResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Error;
      reader.readMessage(value,proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.LoginResp;
      reader.readMessage(value,proto.LoginResp.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 4:
      var value = new proto.ChatResp;
      reader.readMessage(value,proto.ChatResp.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    case 6:
      var value = new proto.GetInfoResp;
      reader.readMessage(value,proto.GetInfoResp.deserializeBinaryFromReader);
      msg.setGetInfo(value);
      break;
    case 7:
      var value = new proto.LogoutResp;
      reader.readMessage(value,proto.LogoutResp.deserializeBinaryFromReader);
      msg.setLogout(value);
      break;
    case 10:
      var value = new proto.InitLoginResp;
      reader.readMessage(value,proto.InitLoginResp.deserializeBinaryFromReader);
      msg.setInitLoginResp(value);
      break;
    case 12:
      var value = new proto.Service_Resp;
      reader.readMessage(value,proto.Service_Resp.deserializeBinaryFromReader);
      msg.setServiceResp(value);
      break;
    case 13:
      var value = new proto.Ex1QueryUserStatusResp;
      reader.readMessage(value,proto.Ex1QueryUserStatusResp.deserializeBinaryFromReader);
      msg.setE1QueryUser(value);
      break;
    case 100:
      var value = new proto.GetMultiInfosResp;
      reader.readMessage(value,proto.GetMultiInfosResp.deserializeBinaryFromReader);
      msg.setGetMultiInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Error.serializeBinaryToWriter
    );
  }
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LoginResp.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ChatResp.serializeBinaryToWriter
    );
  }
  f = message.getGetInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.GetInfoResp.serializeBinaryToWriter
    );
  }
  f = message.getLogout();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.LogoutResp.serializeBinaryToWriter
    );
  }
  f = message.getInitLoginResp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.InitLoginResp.serializeBinaryToWriter
    );
  }
  f = message.getServiceResp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Service_Resp.serializeBinaryToWriter
    );
  }
  f = message.getE1QueryUser();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Ex1QueryUserStatusResp.serializeBinaryToWriter
    );
  }
  f = message.getGetMultiInfos();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.GetMultiInfosResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Error error = 1;
 * @return {?proto.Error}
 */
proto.Response.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.Error, 1));
};


/** @param {?proto.Error|undefined} value */
proto.Response.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Response.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LoginResp login = 3;
 * @return {?proto.LoginResp}
 */
proto.Response.prototype.getLogin = function() {
  return /** @type{?proto.LoginResp} */ (
    jspb.Message.getWrapperField(this, proto.LoginResp, 3));
};


/** @param {?proto.LoginResp|undefined} value */
proto.Response.prototype.setLogin = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Response.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChatResp chat = 4;
 * @return {?proto.ChatResp}
 */
proto.Response.prototype.getChat = function() {
  return /** @type{?proto.ChatResp} */ (
    jspb.Message.getWrapperField(this, proto.ChatResp, 4));
};


/** @param {?proto.ChatResp|undefined} value */
proto.Response.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Response.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasChat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GetInfoResp get_info = 6;
 * @return {?proto.GetInfoResp}
 */
proto.Response.prototype.getGetInfo = function() {
  return /** @type{?proto.GetInfoResp} */ (
    jspb.Message.getWrapperField(this, proto.GetInfoResp, 6));
};


/** @param {?proto.GetInfoResp|undefined} value */
proto.Response.prototype.setGetInfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Response.prototype.clearGetInfo = function() {
  this.setGetInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasGetInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LogoutResp logout = 7;
 * @return {?proto.LogoutResp}
 */
proto.Response.prototype.getLogout = function() {
  return /** @type{?proto.LogoutResp} */ (
    jspb.Message.getWrapperField(this, proto.LogoutResp, 7));
};


/** @param {?proto.LogoutResp|undefined} value */
proto.Response.prototype.setLogout = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Response.prototype.clearLogout = function() {
  this.setLogout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasLogout = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional InitLoginResp init_login_resp = 10;
 * @return {?proto.InitLoginResp}
 */
proto.Response.prototype.getInitLoginResp = function() {
  return /** @type{?proto.InitLoginResp} */ (
    jspb.Message.getWrapperField(this, proto.InitLoginResp, 10));
};


/** @param {?proto.InitLoginResp|undefined} value */
proto.Response.prototype.setInitLoginResp = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Response.prototype.clearInitLoginResp = function() {
  this.setInitLoginResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasInitLoginResp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Service_Resp service_resp = 12;
 * @return {?proto.Service_Resp}
 */
proto.Response.prototype.getServiceResp = function() {
  return /** @type{?proto.Service_Resp} */ (
    jspb.Message.getWrapperField(this, proto.Service_Resp, 12));
};


/** @param {?proto.Service_Resp|undefined} value */
proto.Response.prototype.setServiceResp = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.Response.prototype.clearServiceResp = function() {
  this.setServiceResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasServiceResp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Ex1QueryUserStatusResp e1_query_user = 13;
 * @return {?proto.Ex1QueryUserStatusResp}
 */
proto.Response.prototype.getE1QueryUser = function() {
  return /** @type{?proto.Ex1QueryUserStatusResp} */ (
    jspb.Message.getWrapperField(this, proto.Ex1QueryUserStatusResp, 13));
};


/** @param {?proto.Ex1QueryUserStatusResp|undefined} value */
proto.Response.prototype.setE1QueryUser = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.Response.prototype.clearE1QueryUser = function() {
  this.setE1QueryUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasE1QueryUser = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional GetMultiInfosResp get_multi_infos = 100;
 * @return {?proto.GetMultiInfosResp}
 */
proto.Response.prototype.getGetMultiInfos = function() {
  return /** @type{?proto.GetMultiInfosResp} */ (
    jspb.Message.getWrapperField(this, proto.GetMultiInfosResp, 100));
};


/** @param {?proto.GetMultiInfosResp|undefined} value */
proto.Response.prototype.setGetMultiInfos = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.Response.prototype.clearGetMultiInfos = function() {
  this.setGetMultiInfos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasGetMultiInfos = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewMessageNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewMessageNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewMessageNotify.displayName = 'proto.NewMessageNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewMessageNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.NewMessageNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewMessageNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewMessageNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoType: jspb.Message.getField(msg, 1),
    infoContent: msg.getInfoContent_asB64(),
    infoId: jspb.Message.getField(msg, 3),
    queryAfterSeconds: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewMessageNotify}
 */
proto.NewMessageNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewMessageNotify;
  return proto.NewMessageNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewMessageNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewMessageNotify}
 */
proto.NewMessageNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfoContent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInfoId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQueryAfterSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewMessageNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewMessageNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewMessageNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewMessageNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required string info_type = 1;
 * @return {string}
 */
proto.NewMessageNotify.prototype.getInfoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NewMessageNotify.prototype.setInfoType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NewMessageNotify.prototype.clearInfoType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NewMessageNotify.prototype.hasInfoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes info_content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.NewMessageNotify.prototype.getInfoContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes info_content = 2;
 * This is a type-conversion wrapper around `getInfoContent()`
 * @return {string}
 */
proto.NewMessageNotify.prototype.getInfoContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfoContent()));
};


/**
 * optional bytes info_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfoContent()`
 * @return {!Uint8Array}
 */
proto.NewMessageNotify.prototype.getInfoContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfoContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.NewMessageNotify.prototype.setInfoContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NewMessageNotify.prototype.clearInfoContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NewMessageNotify.prototype.hasInfoContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 info_id = 3;
 * @return {number}
 */
proto.NewMessageNotify.prototype.getInfoId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NewMessageNotify.prototype.setInfoId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.NewMessageNotify.prototype.clearInfoId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NewMessageNotify.prototype.hasInfoId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 query_after_seconds = 4;
 * @return {number}
 */
proto.NewMessageNotify.prototype.getQueryAfterSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NewMessageNotify.prototype.setQueryAfterSeconds = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.NewMessageNotify.prototype.clearQueryAfterSeconds = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NewMessageNotify.prototype.hasQueryAfterSeconds = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReLoginNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReLoginNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReLoginNotify.displayName = 'proto.ReLoginNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReLoginNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.ReLoginNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReLoginNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReLoginNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    newIp: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReLoginNotify}
 */
proto.ReLoginNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReLoginNotify;
  return proto.ReLoginNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReLoginNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReLoginNotify}
 */
proto.ReLoginNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReLoginNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReLoginNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReLoginNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReLoginNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string new_ip = 1;
 * @return {string}
 */
proto.ReLoginNotify.prototype.getNewIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReLoginNotify.prototype.setNewIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ReLoginNotify.prototype.clearNewIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReLoginNotify.prototype.hasNewIp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReConnectNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReConnectNotify.repeatedFields_, null);
};
goog.inherits(proto.ReConnectNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReConnectNotify.displayName = 'proto.ReConnectNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReConnectNotify.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReConnectNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.ReConnectNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReConnectNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReConnectNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2),
    moreIpsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReConnectNotify}
 */
proto.ReConnectNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReConnectNotify;
  return proto.ReConnectNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReConnectNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReConnectNotify}
 */
proto.ReConnectNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMoreIps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReConnectNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReConnectNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReConnectNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReConnectNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMoreIpsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.ReConnectNotify.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReConnectNotify.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ReConnectNotify.prototype.clearIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReConnectNotify.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.ReConnectNotify.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ReConnectNotify.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ReConnectNotify.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReConnectNotify.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string more_ips = 3;
 * @return {!Array.<string>}
 */
proto.ReConnectNotify.prototype.getMoreIpsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.ReConnectNotify.prototype.setMoreIpsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ReConnectNotify.prototype.addMoreIps = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.ReConnectNotify.prototype.clearMoreIpsList = function() {
  this.setMoreIpsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Notify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Notify.displayName = 'proto.Notify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notify.prototype.toObject = function(opt_includeInstance) {
  return proto.Notify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notify.toObject = function(includeInstance, msg) {
  var f, obj = {
    newinfoNtf: (f = msg.getNewinfoNtf()) && proto.NewMessageNotify.toObject(includeInstance, f),
    reloginNtf: (f = msg.getReloginNtf()) && proto.ReLoginNotify.toObject(includeInstance, f),
    reconnectNtf: (f = msg.getReconnectNtf()) && proto.ReConnectNotify.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notify}
 */
proto.Notify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notify;
  return proto.Notify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notify}
 */
proto.Notify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NewMessageNotify;
      reader.readMessage(value,proto.NewMessageNotify.deserializeBinaryFromReader);
      msg.setNewinfoNtf(value);
      break;
    case 2:
      var value = new proto.ReLoginNotify;
      reader.readMessage(value,proto.ReLoginNotify.deserializeBinaryFromReader);
      msg.setReloginNtf(value);
      break;
    case 3:
      var value = new proto.ReConnectNotify;
      reader.readMessage(value,proto.ReConnectNotify.deserializeBinaryFromReader);
      msg.setReconnectNtf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewinfoNtf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NewMessageNotify.serializeBinaryToWriter
    );
  }
  f = message.getReloginNtf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ReLoginNotify.serializeBinaryToWriter
    );
  }
  f = message.getReconnectNtf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ReConnectNotify.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewMessageNotify newinfo_ntf = 1;
 * @return {?proto.NewMessageNotify}
 */
proto.Notify.prototype.getNewinfoNtf = function() {
  return /** @type{?proto.NewMessageNotify} */ (
    jspb.Message.getWrapperField(this, proto.NewMessageNotify, 1));
};


/** @param {?proto.NewMessageNotify|undefined} value */
proto.Notify.prototype.setNewinfoNtf = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Notify.prototype.clearNewinfoNtf = function() {
  this.setNewinfoNtf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Notify.prototype.hasNewinfoNtf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReLoginNotify relogin_ntf = 2;
 * @return {?proto.ReLoginNotify}
 */
proto.Notify.prototype.getReloginNtf = function() {
  return /** @type{?proto.ReLoginNotify} */ (
    jspb.Message.getWrapperField(this, proto.ReLoginNotify, 2));
};


/** @param {?proto.ReLoginNotify|undefined} value */
proto.Notify.prototype.setReloginNtf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Notify.prototype.clearReloginNtf = function() {
  this.setReloginNtf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Notify.prototype.hasReloginNtf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReConnectNotify reconnect_ntf = 3;
 * @return {?proto.ReConnectNotify}
 */
proto.Notify.prototype.getReconnectNtf = function() {
  return /** @type{?proto.ReConnectNotify} */ (
    jspb.Message.getWrapperField(this, proto.ReConnectNotify, 3));
};


/** @param {?proto.ReConnectNotify|undefined} value */
proto.Notify.prototype.setReconnectNtf = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Notify.prototype.clearReconnectNtf = function() {
  this.setReconnectNtf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Notify.prototype.hasReconnectNtf = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ack.displayName = 'proto.Ack';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ack}
 */
proto.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ack;
  return proto.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ack}
 */
proto.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 result = 1;
 * @return {number}
 */
proto.Ack.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Ack.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Ack.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Ack.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RouteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RouteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RouteInfo.displayName = 'proto.RouteInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RouteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RouteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RouteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RouteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername_asB64(),
    msgExchanger: jspb.Message.getField(msg, 2),
    msgRouter: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RouteInfo}
 */
proto.RouteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RouteInfo;
  return proto.RouteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RouteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RouteInfo}
 */
proto.RouteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgExchanger(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgRouter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RouteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RouteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RouteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RouteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required bytes username = 1;
 * @return {!(string|Uint8Array)}
 */
proto.RouteInfo.prototype.getUsername = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes username = 1;
 * This is a type-conversion wrapper around `getUsername()`
 * @return {string}
 */
proto.RouteInfo.prototype.getUsername_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUsername()));
};


/**
 * required bytes username = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUsername()`
 * @return {!Uint8Array}
 */
proto.RouteInfo.prototype.getUsername_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUsername()));
};


/** @param {!(string|Uint8Array)} value */
proto.RouteInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RouteInfo.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouteInfo.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string msg_exchanger = 2;
 * @return {string}
 */
proto.RouteInfo.prototype.getMsgExchanger = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RouteInfo.prototype.setMsgExchanger = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RouteInfo.prototype.clearMsgExchanger = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouteInfo.prototype.hasMsgExchanger = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string msg_router = 3;
 * @return {string}
 */
proto.RouteInfo.prototype.getMsgRouter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RouteInfo.prototype.setMsgRouter = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RouteInfo.prototype.clearMsgRouter = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouteInfo.prototype.hasMsgRouter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proxy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proxy.repeatedFields_, null);
};
goog.inherits(proto.Proxy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Proxy.displayName = 'proto.Proxy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proxy.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proxy.prototype.toObject = function(opt_includeInstance) {
  return proto.Proxy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proxy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proxy.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getField(msg, 1),
    receiverList: jspb.Message.toObjectList(msg.getReceiverList(),
    proto.RouteInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proxy}
 */
proto.Proxy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proxy;
  return proto.Proxy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proxy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proxy}
 */
proto.Proxy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = new proto.RouteInfo;
      reader.readMessage(value,proto.RouteInfo.deserializeBinaryFromReader);
      msg.addReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proxy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proxy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proxy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proxy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceiverList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.RouteInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required string sender = 1;
 * @return {string}
 */
proto.Proxy.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Proxy.prototype.setSender = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Proxy.prototype.clearSender = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Proxy.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RouteInfo receiver = 2;
 * @return {!Array.<!proto.RouteInfo>}
 */
proto.Proxy.prototype.getReceiverList = function() {
  return /** @type{!Array.<!proto.RouteInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RouteInfo, 2));
};


/** @param {!Array.<!proto.RouteInfo>} value */
proto.Proxy.prototype.setReceiverList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.RouteInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RouteInfo}
 */
proto.Proxy.prototype.addReceiver = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.RouteInfo, opt_index);
};


proto.Proxy.prototype.clearReceiverList = function() {
  this.setReceiverList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Message.displayName = 'proto.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getField(msg, 1),
    sn: jspb.Message.getField(msg, 2),
    sender: jspb.Message.getField(msg, 3),
    receiver: jspb.Message.getField(msg, 4),
    receiverType: jspb.Message.getField(msg, 5),
    req: (f = msg.getReq()) && proto.Request.toObject(includeInstance, f),
    resp: (f = msg.getResp()) && proto.Response.toObject(includeInstance, f),
    notify: (f = msg.getNotify()) && proto.Notify.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && proto.Ack.toObject(includeInstance, f),
    proxyMesg: (f = msg.getProxyMesg()) && proto.Proxy.toObject(includeInstance, f),
    clientData: jspb.Message.getField(msg, 11),
    senderType: jspb.Message.getField(msg, 12),
    senderJid: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverType(value);
      break;
    case 6:
      var value = new proto.Request;
      reader.readMessage(value,proto.Request.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    case 7:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResp(value);
      break;
    case 8:
      var value = new proto.Notify;
      reader.readMessage(value,proto.Notify.deserializeBinaryFromReader);
      msg.setNotify(value);
      break;
    case 9:
      var value = new proto.Ack;
      reader.readMessage(value,proto.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 10:
      var value = new proto.Proxy;
      reader.readMessage(value,proto.Proxy.deserializeBinaryFromReader);
      msg.setProxyMesg(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientData(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderType(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderJid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Request.serializeBinaryToWriter
    );
  }
  f = message.getResp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getNotify();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Notify.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Ack.serializeBinaryToWriter
    );
  }
  f = message.getProxyMesg();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Proxy.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * required uint32 msgid = 1;
 * @return {number}
 */
proto.Message.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Message.prototype.setMsgid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Message.prototype.clearMsgid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 sn = 2;
 * @return {number}
 */
proto.Message.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Message.prototype.setSn = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Message.prototype.clearSn = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasSn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string sender = 3;
 * @return {string}
 */
proto.Message.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Message.prototype.setSender = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Message.prototype.clearSender = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string receiver = 4;
 * @return {string}
 */
proto.Message.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Message.prototype.setReceiver = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Message.prototype.clearReceiver = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string receiver_type = 5;
 * @return {string}
 */
proto.Message.prototype.getReceiverType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Message.prototype.setReceiverType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Message.prototype.clearReceiverType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasReceiverType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Request req = 6;
 * @return {?proto.Request}
 */
proto.Message.prototype.getReq = function() {
  return /** @type{?proto.Request} */ (
    jspb.Message.getWrapperField(this, proto.Request, 6));
};


/** @param {?proto.Request|undefined} value */
proto.Message.prototype.setReq = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Message.prototype.clearReq = function() {
  this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasReq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Response resp = 7;
 * @return {?proto.Response}
 */
proto.Message.prototype.getResp = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 7));
};


/** @param {?proto.Response|undefined} value */
proto.Message.prototype.setResp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Message.prototype.clearResp = function() {
  this.setResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasResp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Notify notify = 8;
 * @return {?proto.Notify}
 */
proto.Message.prototype.getNotify = function() {
  return /** @type{?proto.Notify} */ (
    jspb.Message.getWrapperField(this, proto.Notify, 8));
};


/** @param {?proto.Notify|undefined} value */
proto.Message.prototype.setNotify = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Message.prototype.clearNotify = function() {
  this.setNotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasNotify = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Ack ack = 9;
 * @return {?proto.Ack}
 */
proto.Message.prototype.getAck = function() {
  return /** @type{?proto.Ack} */ (
    jspb.Message.getWrapperField(this, proto.Ack, 9));
};


/** @param {?proto.Ack|undefined} value */
proto.Message.prototype.setAck = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Message.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasAck = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Proxy proxy_mesg = 10;
 * @return {?proto.Proxy}
 */
proto.Message.prototype.getProxyMesg = function() {
  return /** @type{?proto.Proxy} */ (
    jspb.Message.getWrapperField(this, proto.Proxy, 10));
};


/** @param {?proto.Proxy|undefined} value */
proto.Message.prototype.setProxyMesg = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Message.prototype.clearProxyMesg = function() {
  this.setProxyMesg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasProxyMesg = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 client_data = 11;
 * @return {number}
 */
proto.Message.prototype.getClientData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Message.prototype.setClientData = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Message.prototype.clearClientData = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasClientData = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string sender_type = 12;
 * @return {string}
 */
proto.Message.prototype.getSenderType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Message.prototype.setSenderType = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Message.prototype.clearSenderType = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasSenderType = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string sender_jid = 13;
 * @return {string}
 */
proto.Message.prototype.getSenderJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Message.prototype.setSenderJid = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Message.prototype.clearSenderJid = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Message.prototype.hasSenderJid = function() {
  return jspb.Message.getField(this, 13) != null;
};


goog.object.extend(exports, proto);
