/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ApplyJoinChatRoomRequest', null, global);
goog.exportSymbol('proto.ApplyJoinChatRoomResponse', null, global);
goog.exportSymbol('proto.CRPair', null, global);
goog.exportSymbol('proto.CRUser', null, global);
goog.exportSymbol('proto.ChatRoom', null, global);
goog.exportSymbol('proto.ChatRoomDownToUser', null, global);
goog.exportSymbol('proto.ChatRoomErrorMsg', null, global);
goog.exportSymbol('proto.ChatRoomMNotify', null, global);
goog.exportSymbol('proto.ChatRoomMessageRequest', null, global);
goog.exportSymbol('proto.ChatRoomMessageResponse', null, global);
goog.exportSymbol('proto.ChatRoomNewMsg', null, global);
goog.exportSymbol('proto.ChatRoomPacket', null, global);
goog.exportSymbol('proto.ChatRoomUpToServer', null, global);
goog.exportSymbol('proto.CreateChatRoomNotify', null, global);
goog.exportSymbol('proto.CreateChatRoomRequest', null, global);
goog.exportSymbol('proto.CreateChatRoomResponse', null, global);
goog.exportSymbol('proto.CreateMultiChatRoomRequest', null, global);
goog.exportSymbol('proto.CreateMultiChatRoomResponse', null, global);
goog.exportSymbol('proto.GetChatRoomDetailRequest', null, global);
goog.exportSymbol('proto.GetChatRoomDetailResponse', null, global);
goog.exportSymbol('proto.KickChatRoomMemberRequest', null, global);
goog.exportSymbol('proto.KickChatRoomMemberResponse', null, global);
goog.exportSymbol('proto.KickMemberNotify', null, global);
goog.exportSymbol('proto.MemberJoinChatRoomNotify', null, global);
goog.exportSymbol('proto.MemberQuitChatRoomNotify', null, global);
goog.exportSymbol('proto.QueryAllGameRoomRequest', null, global);
goog.exportSymbol('proto.QueryAllGameRoomResponse', null, global);
goog.exportSymbol('proto.QueryChatRoomIDRequest', null, global);
goog.exportSymbol('proto.QueryChatRoomIDResponse', null, global);
goog.exportSymbol('proto.QuitChatRoomRequest', null, global);
goog.exportSymbol('proto.QuitChatRoomResponse', null, global);
goog.exportSymbol('proto.SubscribeRequest', null, global);
goog.exportSymbol('proto.SubscribeResponse', null, global);
goog.exportSymbol('proto.SyncRoomToDBRequest', null, global);
goog.exportSymbol('proto.UpdateChatRoomNotify', null, global);
goog.exportSymbol('proto.UpdateChatRoomRequest', null, global);
goog.exportSymbol('proto.UpdateChatRoomResponse', null, global);
goog.exportSymbol('proto.UpdateRoomIDRequest', null, global);
goog.exportSymbol('proto.UpdateRoomIDResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CRPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CRPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CRPair.displayName = 'proto.CRPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CRPair.prototype.toObject = function(opt_includeInstance) {
  return proto.CRPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CRPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CRPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CRPair}
 */
proto.CRPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CRPair;
  return proto.CRPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CRPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CRPair}
 */
proto.CRPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CRPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CRPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CRPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CRPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.CRPair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CRPair.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.CRPair.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRPair.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.CRPair.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.CRPair.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.CRPair.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.CRPair.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CRPair.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRPair.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CRUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CRUser.repeatedFields_, null);
};
goog.inherits(proto.CRUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CRUser.displayName = 'proto.CRUser';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CRUser.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CRUser.prototype.toObject = function(opt_includeInstance) {
  return proto.CRUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CRUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CRUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: msg.getUserid_asB64(),
    name: jspb.Message.getField(msg, 2),
    publicsettingList: jspb.Message.toObjectList(msg.getPublicsettingList(),
    proto.CRPair.toObject, includeInstance),
    privatesettingList: jspb.Message.toObjectList(msg.getPrivatesettingList(),
    proto.CRPair.toObject, includeInstance),
    status: jspb.Message.getField(msg, 5),
    userdata: msg.getUserdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CRUser}
 */
proto.CRUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CRUser;
  return proto.CRUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CRUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CRUser}
 */
proto.CRUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addPublicsetting(value);
      break;
    case 4:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addPrivatesetting(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CRUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CRUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CRUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CRUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublicsettingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
  f = message.getPrivatesettingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes userid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CRUser.prototype.getUserid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes userid = 1;
 * This is a type-conversion wrapper around `getUserid()`
 * @return {string}
 */
proto.CRUser.prototype.getUserid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserid()));
};


/**
 * optional bytes userid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserid()`
 * @return {!Uint8Array}
 */
proto.CRUser.prototype.getUserid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserid()));
};


/** @param {!(string|Uint8Array)} value */
proto.CRUser.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.CRUser.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRUser.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CRUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CRUser.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CRUser.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRUser.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CRPair publicsetting = 3;
 * @return {!Array.<!proto.CRPair>}
 */
proto.CRUser.prototype.getPublicsettingList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 3));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.CRUser.prototype.setPublicsettingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.CRUser.prototype.addPublicsetting = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.CRPair, opt_index);
};


proto.CRUser.prototype.clearPublicsettingList = function() {
  this.setPublicsettingList([]);
};


/**
 * repeated CRPair privatesetting = 4;
 * @return {!Array.<!proto.CRPair>}
 */
proto.CRUser.prototype.getPrivatesettingList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 4));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.CRUser.prototype.setPrivatesettingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.CRUser.prototype.addPrivatesetting = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.CRPair, opt_index);
};


proto.CRUser.prototype.clearPrivatesettingList = function() {
  this.setPrivatesettingList([]);
};


/**
 * optional int32 status = 5;
 * @return {number}
 */
proto.CRUser.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CRUser.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.CRUser.prototype.clearStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRUser.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes userdata = 6;
 * @return {!(string|Uint8Array)}
 */
proto.CRUser.prototype.getUserdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes userdata = 6;
 * This is a type-conversion wrapper around `getUserdata()`
 * @return {string}
 */
proto.CRUser.prototype.getUserdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserdata()));
};


/**
 * optional bytes userdata = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserdata()`
 * @return {!Uint8Array}
 */
proto.CRUser.prototype.getUserdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserdata()));
};


/** @param {!(string|Uint8Array)} value */
proto.CRUser.prototype.setUserdata = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.CRUser.prototype.clearUserdata = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CRUser.prototype.hasUserdata = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatRoom.repeatedFields_, null);
};
goog.inherits(proto.ChatRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoom.displayName = 'proto.ChatRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatRoom.repeatedFields_ = [8,9,10,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    creater: (f = msg.getCreater()) && proto.CRUser.toObject(includeInstance, f),
    name: jspb.Message.getField(msg, 3),
    version: jspb.Message.getField(msg, 4),
    maxmsgid: jspb.Message.getField(msg, 5),
    memcountlimit: jspb.Message.getField(msg, 6),
    roomtype: jspb.Message.getField(msg, 7),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.CRPair.toObject, includeInstance),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.CRUser.toObject, includeInstance),
    blacklistList: msg.getBlacklistList_asB64(),
    gameid: jspb.Message.getField(msg, 11),
    tempmembersList: jspb.Message.toObjectList(msg.getTempmembersList(),
    proto.CRUser.toObject, includeInstance),
    partnerdata: msg.getPartnerdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoom}
 */
proto.ChatRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoom;
  return proto.ChatRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoom}
 */
proto.ChatRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setCreater(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxmsgid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemcountlimit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomtype(value);
      break;
    case 8:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 9:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addBlacklist(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    case 12:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.addTempmembers(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPartnerdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCreater();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = message.getBlacklistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTempmembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoom.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ChatRoom.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ChatRoom.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoom.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoom.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CRUser creater = 2;
 * @return {?proto.CRUser}
 */
proto.ChatRoom.prototype.getCreater = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.ChatRoom.prototype.setCreater = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChatRoom.prototype.clearCreater = function() {
  this.setCreater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasCreater = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ChatRoom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ChatRoom.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatRoom.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 version = 4;
 * @return {number}
 */
proto.ChatRoom.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ChatRoom.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatRoom.prototype.clearVersion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 maxmsgid = 5;
 * @return {number}
 */
proto.ChatRoom.prototype.getMaxmsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ChatRoom.prototype.setMaxmsgid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChatRoom.prototype.clearMaxmsgid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasMaxmsgid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 memcountlimit = 6;
 * @return {number}
 */
proto.ChatRoom.prototype.getMemcountlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ChatRoom.prototype.setMemcountlimit = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatRoom.prototype.clearMemcountlimit = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasMemcountlimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string roomtype = 7;
 * @return {string}
 */
proto.ChatRoom.prototype.getRoomtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ChatRoom.prototype.setRoomtype = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ChatRoom.prototype.clearRoomtype = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasRoomtype = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated CRPair properties = 8;
 * @return {!Array.<!proto.CRPair>}
 */
proto.ChatRoom.prototype.getPropertiesList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 8));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.ChatRoom.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.ChatRoom.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.CRPair, opt_index);
};


proto.ChatRoom.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};


/**
 * repeated CRUser members = 9;
 * @return {!Array.<!proto.CRUser>}
 */
proto.ChatRoom.prototype.getMembersList = function() {
  return /** @type{!Array.<!proto.CRUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRUser, 9));
};


/** @param {!Array.<!proto.CRUser>} value */
proto.ChatRoom.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.CRUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRUser}
 */
proto.ChatRoom.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.CRUser, opt_index);
};


proto.ChatRoom.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * repeated bytes blacklist = 10;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ChatRoom.prototype.getBlacklistList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * repeated bytes blacklist = 10;
 * This is a type-conversion wrapper around `getBlacklistList()`
 * @return {!Array.<string>}
 */
proto.ChatRoom.prototype.getBlacklistList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getBlacklistList()));
};


/**
 * repeated bytes blacklist = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlacklistList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.ChatRoom.prototype.getBlacklistList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getBlacklistList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ChatRoom.prototype.setBlacklistList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ChatRoom.prototype.addBlacklist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.ChatRoom.prototype.clearBlacklistList = function() {
  this.setBlacklistList([]);
};


/**
 * optional string gameid = 11;
 * @return {string}
 */
proto.ChatRoom.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.ChatRoom.prototype.setGameid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.ChatRoom.prototype.clearGameid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasGameid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated CRUser tempmembers = 12;
 * @return {!Array.<!proto.CRUser>}
 */
proto.ChatRoom.prototype.getTempmembersList = function() {
  return /** @type{!Array.<!proto.CRUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRUser, 12));
};


/** @param {!Array.<!proto.CRUser>} value */
proto.ChatRoom.prototype.setTempmembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.CRUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRUser}
 */
proto.ChatRoom.prototype.addTempmembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.CRUser, opt_index);
};


proto.ChatRoom.prototype.clearTempmembersList = function() {
  this.setTempmembersList([]);
};


/**
 * optional bytes partnerdata = 13;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoom.prototype.getPartnerdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes partnerdata = 13;
 * This is a type-conversion wrapper around `getPartnerdata()`
 * @return {string}
 */
proto.ChatRoom.prototype.getPartnerdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPartnerdata()));
};


/**
 * optional bytes partnerdata = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPartnerdata()`
 * @return {!Uint8Array}
 */
proto.ChatRoom.prototype.getPartnerdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPartnerdata()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoom.prototype.setPartnerdata = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.ChatRoom.prototype.clearPartnerdata = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoom.prototype.hasPartnerdata = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateChatRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateChatRoomRequest.displayName = 'proto.CreateChatRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateChatRoomRequest.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getField(msg, 1),
    roomname: jspb.Message.getField(msg, 2),
    memcountlimit: jspb.Message.getField(msg, 3),
    roomtype: jspb.Message.getField(msg, 4),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.CRUser.toObject, includeInstance),
    creater: (f = msg.getCreater()) && proto.CRUser.toObject(includeInstance, f),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.CRPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateChatRoomRequest}
 */
proto.CreateChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateChatRoomRequest;
  return proto.CreateChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateChatRoomRequest}
 */
proto.CreateChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemcountlimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomtype(value);
      break;
    case 5:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 6:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setCreater(value);
      break;
    case 7:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = message.getCreater();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string gameid = 1;
 * @return {string}
 */
proto.CreateChatRoomRequest.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateChatRoomRequest.prototype.setGameid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.CreateChatRoomRequest.prototype.clearGameid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomRequest.prototype.hasGameid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string roomname = 2;
 * @return {string}
 */
proto.CreateChatRoomRequest.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateChatRoomRequest.prototype.setRoomname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CreateChatRoomRequest.prototype.clearRoomname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomRequest.prototype.hasRoomname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 memcountlimit = 3;
 * @return {number}
 */
proto.CreateChatRoomRequest.prototype.getMemcountlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CreateChatRoomRequest.prototype.setMemcountlimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.CreateChatRoomRequest.prototype.clearMemcountlimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomRequest.prototype.hasMemcountlimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string roomtype = 4;
 * @return {string}
 */
proto.CreateChatRoomRequest.prototype.getRoomtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CreateChatRoomRequest.prototype.setRoomtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.CreateChatRoomRequest.prototype.clearRoomtype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomRequest.prototype.hasRoomtype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CRUser members = 5;
 * @return {!Array.<!proto.CRUser>}
 */
proto.CreateChatRoomRequest.prototype.getMembersList = function() {
  return /** @type{!Array.<!proto.CRUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRUser, 5));
};


/** @param {!Array.<!proto.CRUser>} value */
proto.CreateChatRoomRequest.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.CRUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRUser}
 */
proto.CreateChatRoomRequest.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.CRUser, opt_index);
};


proto.CreateChatRoomRequest.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional CRUser creater = 6;
 * @return {?proto.CRUser}
 */
proto.CreateChatRoomRequest.prototype.getCreater = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 6));
};


/** @param {?proto.CRUser|undefined} value */
proto.CreateChatRoomRequest.prototype.setCreater = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.CreateChatRoomRequest.prototype.clearCreater = function() {
  this.setCreater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomRequest.prototype.hasCreater = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated CRPair properties = 7;
 * @return {!Array.<!proto.CRPair>}
 */
proto.CreateChatRoomRequest.prototype.getPropertiesList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 7));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.CreateChatRoomRequest.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.CreateChatRoomRequest.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.CRPair, opt_index);
};


proto.CreateChatRoomRequest.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateChatRoomResponse.displayName = 'proto.CreateChatRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateChatRoomResponse}
 */
proto.CreateChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateChatRoomResponse;
  return proto.CreateChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateChatRoomResponse}
 */
proto.CreateChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.CreateChatRoomResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.CreateChatRoomResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateChatRoomResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMultiChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateMultiChatRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateMultiChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMultiChatRoomRequest.displayName = 'proto.CreateMultiChatRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateMultiChatRoomRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMultiChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMultiChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMultiChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMultiChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.CreateChatRoomRequest.toObject, includeInstance),
    creater: (f = msg.getCreater()) && proto.CRUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMultiChatRoomRequest}
 */
proto.CreateMultiChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMultiChatRoomRequest;
  return proto.CreateMultiChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMultiChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMultiChatRoomRequest}
 */
proto.CreateMultiChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CreateChatRoomRequest;
      reader.readMessage(value,proto.CreateChatRoomRequest.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setCreater(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMultiChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateMultiChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateMultiChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMultiChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CreateChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreater();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CreateChatRoomRequest rooms = 1;
 * @return {!Array.<!proto.CreateChatRoomRequest>}
 */
proto.CreateMultiChatRoomRequest.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.CreateChatRoomRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CreateChatRoomRequest, 1));
};


/** @param {!Array.<!proto.CreateChatRoomRequest>} value */
proto.CreateMultiChatRoomRequest.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CreateChatRoomRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CreateChatRoomRequest}
 */
proto.CreateMultiChatRoomRequest.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CreateChatRoomRequest, opt_index);
};


proto.CreateMultiChatRoomRequest.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};


/**
 * optional CRUser creater = 2;
 * @return {?proto.CRUser}
 */
proto.CreateMultiChatRoomRequest.prototype.getCreater = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.CreateMultiChatRoomRequest.prototype.setCreater = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CreateMultiChatRoomRequest.prototype.clearCreater = function() {
  this.setCreater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateMultiChatRoomRequest.prototype.hasCreater = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateMultiChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateMultiChatRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.CreateMultiChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateMultiChatRoomResponse.displayName = 'proto.CreateMultiChatRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateMultiChatRoomResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateMultiChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateMultiChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateMultiChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMultiChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.ChatRoom.toObject, includeInstance),
    creater: (f = msg.getCreater()) && proto.CRUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateMultiChatRoomResponse}
 */
proto.CreateMultiChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateMultiChatRoomResponse;
  return proto.CreateMultiChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateMultiChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateMultiChatRoomResponse}
 */
proto.CreateMultiChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setCreater(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateMultiChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateMultiChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateMultiChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateMultiChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getCreater();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatRoom rooms = 1;
 * @return {!Array.<!proto.ChatRoom>}
 */
proto.CreateMultiChatRoomResponse.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.ChatRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatRoom, 1));
};


/** @param {!Array.<!proto.ChatRoom>} value */
proto.CreateMultiChatRoomResponse.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChatRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatRoom}
 */
proto.CreateMultiChatRoomResponse.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChatRoom, opt_index);
};


proto.CreateMultiChatRoomResponse.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};


/**
 * optional CRUser creater = 2;
 * @return {?proto.CRUser}
 */
proto.CreateMultiChatRoomResponse.prototype.getCreater = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.CreateMultiChatRoomResponse.prototype.setCreater = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CreateMultiChatRoomResponse.prototype.clearCreater = function() {
  this.setCreater(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateMultiChatRoomResponse.prototype.hasCreater = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetChatRoomDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetChatRoomDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetChatRoomDetailRequest.displayName = 'proto.GetChatRoomDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetChatRoomDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetChatRoomDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetChatRoomDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetChatRoomDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    index: jspb.Message.getField(msg, 2),
    offset: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetChatRoomDetailRequest}
 */
proto.GetChatRoomDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetChatRoomDetailRequest;
  return proto.GetChatRoomDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetChatRoomDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetChatRoomDetailRequest}
 */
proto.GetChatRoomDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetChatRoomDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetChatRoomDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetChatRoomDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetChatRoomDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetChatRoomDetailRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.GetChatRoomDetailRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.GetChatRoomDetailRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.GetChatRoomDetailRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GetChatRoomDetailRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetChatRoomDetailRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.GetChatRoomDetailRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GetChatRoomDetailRequest.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GetChatRoomDetailRequest.prototype.clearIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetChatRoomDetailRequest.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.GetChatRoomDetailRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GetChatRoomDetailRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GetChatRoomDetailRequest.prototype.clearOffset = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetChatRoomDetailRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetChatRoomDetailResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetChatRoomDetailResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetChatRoomDetailResponse.displayName = 'proto.GetChatRoomDetailResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetChatRoomDetailResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetChatRoomDetailResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetChatRoomDetailResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetChatRoomDetailResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetChatRoomDetailResponse}
 */
proto.GetChatRoomDetailResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetChatRoomDetailResponse;
  return proto.GetChatRoomDetailResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetChatRoomDetailResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetChatRoomDetailResponse}
 */
proto.GetChatRoomDetailResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetChatRoomDetailResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetChatRoomDetailResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetChatRoomDetailResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetChatRoomDetailResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.GetChatRoomDetailResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.GetChatRoomDetailResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GetChatRoomDetailResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GetChatRoomDetailResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplyJoinChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplyJoinChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplyJoinChatRoomRequest.displayName = 'proto.ApplyJoinChatRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplyJoinChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplyJoinChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplyJoinChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyJoinChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f),
    useridType: jspb.Message.getField(msg, 3),
    userdata: msg.getUserdata_asB64(),
    noUserlist: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplyJoinChatRoomRequest}
 */
proto.ApplyJoinChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplyJoinChatRoomRequest;
  return proto.ApplyJoinChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplyJoinChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplyJoinChatRoomRequest}
 */
proto.ApplyJoinChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUseridType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserdata(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplyJoinChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplyJoinChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplyJoinChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyJoinChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ApplyJoinChatRoomRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ApplyJoinChatRoomRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ApplyJoinChatRoomRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ApplyJoinChatRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ApplyJoinChatRoomRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatRoom room = 2;
 * @return {?proto.ChatRoom}
 */
proto.ApplyJoinChatRoomRequest.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 2));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.ApplyJoinChatRoomRequest.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ApplyJoinChatRoomRequest.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 userid_type = 3;
 * @return {number}
 */
proto.ApplyJoinChatRoomRequest.prototype.getUseridType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ApplyJoinChatRoomRequest.prototype.setUseridType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ApplyJoinChatRoomRequest.prototype.clearUseridType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.hasUseridType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes userdata = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ApplyJoinChatRoomRequest.prototype.getUserdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes userdata = 4;
 * This is a type-conversion wrapper around `getUserdata()`
 * @return {string}
 */
proto.ApplyJoinChatRoomRequest.prototype.getUserdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserdata()));
};


/**
 * optional bytes userdata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserdata()`
 * @return {!Uint8Array}
 */
proto.ApplyJoinChatRoomRequest.prototype.getUserdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserdata()));
};


/** @param {!(string|Uint8Array)} value */
proto.ApplyJoinChatRoomRequest.prototype.setUserdata = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ApplyJoinChatRoomRequest.prototype.clearUserdata = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.hasUserdata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool no_userlist = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.getNoUserlist = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ApplyJoinChatRoomRequest.prototype.setNoUserlist = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ApplyJoinChatRoomRequest.prototype.clearNoUserlist = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomRequest.prototype.hasNoUserlist = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplyJoinChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplyJoinChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplyJoinChatRoomResponse.displayName = 'proto.ApplyJoinChatRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplyJoinChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplyJoinChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplyJoinChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyJoinChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f),
    pullLost: jspb.Message.getFieldWithDefault(msg, 2, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplyJoinChatRoomResponse}
 */
proto.ApplyJoinChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplyJoinChatRoomResponse;
  return proto.ApplyJoinChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplyJoinChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplyJoinChatRoomResponse}
 */
proto.ApplyJoinChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPullLost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplyJoinChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplyJoinChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplyJoinChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyJoinChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.ApplyJoinChatRoomResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.ApplyJoinChatRoomResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ApplyJoinChatRoomResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool pull_lost = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ApplyJoinChatRoomResponse.prototype.getPullLost = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, true));
};


/** @param {boolean} value */
proto.ApplyJoinChatRoomResponse.prototype.setPullLost = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ApplyJoinChatRoomResponse.prototype.clearPullLost = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplyJoinChatRoomResponse.prototype.hasPullLost = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuitChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuitChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QuitChatRoomRequest.displayName = 'proto.QuitChatRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuitChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QuitChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuitChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuitChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuitChatRoomRequest}
 */
proto.QuitChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuitChatRoomRequest;
  return proto.QuitChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuitChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuitChatRoomRequest}
 */
proto.QuitChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuitChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QuitChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QuitChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuitChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.QuitChatRoomRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.QuitChatRoomRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.QuitChatRoomRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.QuitChatRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.QuitChatRoomRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QuitChatRoomRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatRoom room = 2;
 * @return {?proto.ChatRoom}
 */
proto.QuitChatRoomRequest.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 2));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.QuitChatRoomRequest.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.QuitChatRoomRequest.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QuitChatRoomRequest.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuitChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuitChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QuitChatRoomResponse.displayName = 'proto.QuitChatRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuitChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.QuitChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuitChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuitChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuitChatRoomResponse}
 */
proto.QuitChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuitChatRoomResponse;
  return proto.QuitChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuitChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuitChatRoomResponse}
 */
proto.QuitChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuitChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QuitChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QuitChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QuitChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.QuitChatRoomResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.QuitChatRoomResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.QuitChatRoomResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QuitChatRoomResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryAllGameRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryAllGameRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryAllGameRoomRequest.displayName = 'proto.QueryAllGameRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryAllGameRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryAllGameRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryAllGameRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAllGameRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryAllGameRoomRequest}
 */
proto.QueryAllGameRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryAllGameRoomRequest;
  return proto.QueryAllGameRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryAllGameRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryAllGameRoomRequest}
 */
proto.QueryAllGameRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryAllGameRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryAllGameRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryAllGameRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAllGameRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryAllGameRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.QueryAllGameRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.QueryAllGameRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryAllGameRoomResponse.displayName = 'proto.QueryAllGameRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.QueryAllGameRoomResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryAllGameRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryAllGameRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryAllGameRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAllGameRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    maplistList: jspb.Message.toObjectList(msg.getMaplistList(),
    proto.CRPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryAllGameRoomResponse}
 */
proto.QueryAllGameRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryAllGameRoomResponse;
  return proto.QueryAllGameRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryAllGameRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryAllGameRoomResponse}
 */
proto.QueryAllGameRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addMaplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryAllGameRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryAllGameRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryAllGameRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAllGameRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CRPair maplist = 1;
 * @return {!Array.<!proto.CRPair>}
 */
proto.QueryAllGameRoomResponse.prototype.getMaplistList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 1));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.QueryAllGameRoomResponse.prototype.setMaplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.QueryAllGameRoomResponse.prototype.addMaplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CRPair, opt_index);
};


proto.QueryAllGameRoomResponse.prototype.clearMaplistList = function() {
  this.setMaplistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryChatRoomIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryChatRoomIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryChatRoomIDRequest.displayName = 'proto.QueryChatRoomIDRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryChatRoomIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryChatRoomIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryChatRoomIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryChatRoomIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryChatRoomIDRequest}
 */
proto.QueryChatRoomIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryChatRoomIDRequest;
  return proto.QueryChatRoomIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryChatRoomIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryChatRoomIDRequest}
 */
proto.QueryChatRoomIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryChatRoomIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryChatRoomIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryChatRoomIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryChatRoomIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string gameid = 1;
 * @return {string}
 */
proto.QueryChatRoomIDRequest.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.QueryChatRoomIDRequest.prototype.setGameid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.QueryChatRoomIDRequest.prototype.clearGameid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryChatRoomIDRequest.prototype.hasGameid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryChatRoomIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryChatRoomIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryChatRoomIDResponse.displayName = 'proto.QueryChatRoomIDResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryChatRoomIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryChatRoomIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryChatRoomIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryChatRoomIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    gameid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryChatRoomIDResponse}
 */
proto.QueryChatRoomIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryChatRoomIDResponse;
  return proto.QueryChatRoomIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryChatRoomIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryChatRoomIDResponse}
 */
proto.QueryChatRoomIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryChatRoomIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryChatRoomIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryChatRoomIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryChatRoomIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.QueryChatRoomIDResponse.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.QueryChatRoomIDResponse.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * optional bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.QueryChatRoomIDResponse.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.QueryChatRoomIDResponse.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.QueryChatRoomIDResponse.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryChatRoomIDResponse.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gameid = 2;
 * @return {string}
 */
proto.QueryChatRoomIDResponse.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.QueryChatRoomIDResponse.prototype.setGameid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.QueryChatRoomIDResponse.prototype.clearGameid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryChatRoomIDResponse.prototype.hasGameid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateRoomIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateRoomIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateRoomIDRequest.displayName = 'proto.UpdateRoomIDRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateRoomIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateRoomIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateRoomIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateRoomIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getField(msg, 1),
    roomid: msg.getRoomid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateRoomIDRequest}
 */
proto.UpdateRoomIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateRoomIDRequest;
  return proto.UpdateRoomIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateRoomIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateRoomIDRequest}
 */
proto.UpdateRoomIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateRoomIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateRoomIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateRoomIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateRoomIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required string gameid = 1;
 * @return {string}
 */
proto.UpdateRoomIDRequest.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UpdateRoomIDRequest.prototype.setGameid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UpdateRoomIDRequest.prototype.clearGameid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateRoomIDRequest.prototype.hasGameid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes roomid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateRoomIDRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes roomid = 2;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.UpdateRoomIDRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.UpdateRoomIDRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.UpdateRoomIDRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UpdateRoomIDRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateRoomIDRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateRoomIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateRoomIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateRoomIDResponse.displayName = 'proto.UpdateRoomIDResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateRoomIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateRoomIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateRoomIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateRoomIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateRoomIDResponse}
 */
proto.UpdateRoomIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateRoomIDResponse;
  return proto.UpdateRoomIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateRoomIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateRoomIDResponse}
 */
proto.UpdateRoomIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateRoomIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateRoomIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateRoomIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateRoomIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateChatRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateChatRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateChatRoomRequest.displayName = 'proto.UpdateChatRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateChatRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateChatRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateChatRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateChatRoomRequest}
 */
proto.UpdateChatRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateChatRoomRequest;
  return proto.UpdateChatRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateChatRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateChatRoomRequest}
 */
proto.UpdateChatRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateChatRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateChatRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateChatRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateChatRoomRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.UpdateChatRoomRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.UpdateChatRoomRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.UpdateChatRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UpdateChatRoomRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateChatRoomRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ChatRoom room = 2;
 * @return {!proto.ChatRoom}
 */
proto.UpdateChatRoomRequest.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 2, 1));
};


/** @param {!proto.ChatRoom} value */
proto.UpdateChatRoomRequest.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UpdateChatRoomRequest.prototype.clearRoom = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateChatRoomRequest.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateChatRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateChatRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateChatRoomResponse.displayName = 'proto.UpdateChatRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateChatRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateChatRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateChatRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateChatRoomResponse}
 */
proto.UpdateChatRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateChatRoomResponse;
  return proto.UpdateChatRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateChatRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateChatRoomResponse}
 */
proto.UpdateChatRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateChatRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateChatRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateChatRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.UpdateChatRoomResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.UpdateChatRoomResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateChatRoomResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateChatRoomResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KickChatRoomMemberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.KickChatRoomMemberRequest.repeatedFields_, null);
};
goog.inherits(proto.KickChatRoomMemberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.KickChatRoomMemberRequest.displayName = 'proto.KickChatRoomMemberRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.KickChatRoomMemberRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KickChatRoomMemberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.KickChatRoomMemberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KickChatRoomMemberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickChatRoomMemberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.CRUser.toObject, includeInstance),
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KickChatRoomMemberRequest}
 */
proto.KickChatRoomMemberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KickChatRoomMemberRequest;
  return proto.KickChatRoomMemberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KickChatRoomMemberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KickChatRoomMemberRequest}
 */
proto.KickChatRoomMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 3:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KickChatRoomMemberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KickChatRoomMemberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KickChatRoomMemberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickChatRoomMemberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.KickChatRoomMemberRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.KickChatRoomMemberRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.KickChatRoomMemberRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.KickChatRoomMemberRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.KickChatRoomMemberRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.KickChatRoomMemberRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CRUser members = 2;
 * @return {!Array.<!proto.CRUser>}
 */
proto.KickChatRoomMemberRequest.prototype.getMembersList = function() {
  return /** @type{!Array.<!proto.CRUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRUser, 2));
};


/** @param {!Array.<!proto.CRUser>} value */
proto.KickChatRoomMemberRequest.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CRUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRUser}
 */
proto.KickChatRoomMemberRequest.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CRUser, opt_index);
};


proto.KickChatRoomMemberRequest.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional ChatRoom room = 3;
 * @return {?proto.ChatRoom}
 */
proto.KickChatRoomMemberRequest.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 3));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.KickChatRoomMemberRequest.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.KickChatRoomMemberRequest.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.KickChatRoomMemberRequest.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KickChatRoomMemberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KickChatRoomMemberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.KickChatRoomMemberResponse.displayName = 'proto.KickChatRoomMemberResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KickChatRoomMemberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.KickChatRoomMemberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KickChatRoomMemberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickChatRoomMemberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KickChatRoomMemberResponse}
 */
proto.KickChatRoomMemberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KickChatRoomMemberResponse;
  return proto.KickChatRoomMemberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KickChatRoomMemberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KickChatRoomMemberResponse}
 */
proto.KickChatRoomMemberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KickChatRoomMemberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KickChatRoomMemberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KickChatRoomMemberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickChatRoomMemberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.ChatRoom}
 */
proto.KickChatRoomMemberResponse.prototype.getRoom = function() {
  return /** @type{?proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1));
};


/** @param {?proto.ChatRoom|undefined} value */
proto.KickChatRoomMemberResponse.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.KickChatRoomMemberResponse.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.KickChatRoomMemberResponse.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncRoomToDBRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SyncRoomToDBRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncRoomToDBRequest.displayName = 'proto.SyncRoomToDBRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncRoomToDBRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncRoomToDBRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncRoomToDBRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRoomToDBRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncRoomToDBRequest}
 */
proto.SyncRoomToDBRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncRoomToDBRequest;
  return proto.SyncRoomToDBRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncRoomToDBRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncRoomToDBRequest}
 */
proto.SyncRoomToDBRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncRoomToDBRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SyncRoomToDBRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SyncRoomToDBRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SyncRoomToDBRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.SyncRoomToDBRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.SyncRoomToDBRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.SyncRoomToDBRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.SyncRoomToDBRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SyncRoomToDBRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SyncRoomToDBRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateChatRoomNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateChatRoomNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateChatRoomNotify.displayName = 'proto.CreateChatRoomNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateChatRoomNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateChatRoomNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateChatRoomNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateChatRoomNotify}
 */
proto.CreateChatRoomNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateChatRoomNotify;
  return proto.CreateChatRoomNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateChatRoomNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateChatRoomNotify}
 */
proto.CreateChatRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateChatRoomNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateChatRoomNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateChatRoomNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateChatRoomNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required ChatRoom room = 1;
 * @return {!proto.ChatRoom}
 */
proto.CreateChatRoomNotify.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1, 1));
};


/** @param {!proto.ChatRoom} value */
proto.CreateChatRoomNotify.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateChatRoomNotify.prototype.clearRoom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateChatRoomNotify.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MemberJoinChatRoomNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MemberJoinChatRoomNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MemberJoinChatRoomNotify.displayName = 'proto.MemberJoinChatRoomNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MemberJoinChatRoomNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.MemberJoinChatRoomNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MemberJoinChatRoomNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberJoinChatRoomNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MemberJoinChatRoomNotify}
 */
proto.MemberJoinChatRoomNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MemberJoinChatRoomNotify;
  return proto.MemberJoinChatRoomNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MemberJoinChatRoomNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MemberJoinChatRoomNotify}
 */
proto.MemberJoinChatRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MemberJoinChatRoomNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MemberJoinChatRoomNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MemberJoinChatRoomNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberJoinChatRoomNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required ChatRoom room = 1;
 * @return {!proto.ChatRoom}
 */
proto.MemberJoinChatRoomNotify.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1, 1));
};


/** @param {!proto.ChatRoom} value */
proto.MemberJoinChatRoomNotify.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MemberJoinChatRoomNotify.prototype.clearRoom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MemberJoinChatRoomNotify.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MemberQuitChatRoomNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MemberQuitChatRoomNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MemberQuitChatRoomNotify.displayName = 'proto.MemberQuitChatRoomNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MemberQuitChatRoomNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.MemberQuitChatRoomNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MemberQuitChatRoomNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberQuitChatRoomNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MemberQuitChatRoomNotify}
 */
proto.MemberQuitChatRoomNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MemberQuitChatRoomNotify;
  return proto.MemberQuitChatRoomNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MemberQuitChatRoomNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MemberQuitChatRoomNotify}
 */
proto.MemberQuitChatRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MemberQuitChatRoomNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MemberQuitChatRoomNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MemberQuitChatRoomNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemberQuitChatRoomNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * required ChatRoom room = 1;
 * @return {!proto.ChatRoom}
 */
proto.MemberQuitChatRoomNotify.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1, 1));
};


/** @param {!proto.ChatRoom} value */
proto.MemberQuitChatRoomNotify.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MemberQuitChatRoomNotify.prototype.clearRoom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MemberQuitChatRoomNotify.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KickMemberNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KickMemberNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.KickMemberNotify.displayName = 'proto.KickMemberNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KickMemberNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.KickMemberNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KickMemberNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickMemberNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.CRUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KickMemberNotify}
 */
proto.KickMemberNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KickMemberNotify;
  return proto.KickMemberNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KickMemberNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KickMemberNotify}
 */
proto.KickMemberNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KickMemberNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KickMemberNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KickMemberNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KickMemberNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
};


/**
 * required ChatRoom room = 1;
 * @return {!proto.ChatRoom}
 */
proto.KickMemberNotify.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1, 1));
};


/** @param {!proto.ChatRoom} value */
proto.KickMemberNotify.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.KickMemberNotify.prototype.clearRoom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.KickMemberNotify.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CRUser user = 2;
 * @return {?proto.CRUser}
 */
proto.KickMemberNotify.prototype.getUser = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.KickMemberNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.KickMemberNotify.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.KickMemberNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateChatRoomNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateChatRoomNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateChatRoomNotify.displayName = 'proto.UpdateChatRoomNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateChatRoomNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateChatRoomNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateChatRoomNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.ChatRoom.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.CRUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateChatRoomNotify}
 */
proto.UpdateChatRoomNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateChatRoomNotify;
  return proto.UpdateChatRoomNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateChatRoomNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateChatRoomNotify}
 */
proto.UpdateChatRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChatRoom;
      reader.readMessage(value,proto.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateChatRoomNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateChatRoomNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateChatRoomNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateChatRoomNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
};


/**
 * required ChatRoom room = 1;
 * @return {!proto.ChatRoom}
 */
proto.UpdateChatRoomNotify.prototype.getRoom = function() {
  return /** @type{!proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoom, 1, 1));
};


/** @param {!proto.ChatRoom} value */
proto.UpdateChatRoomNotify.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateChatRoomNotify.prototype.clearRoom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateChatRoomNotify.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CRUser user = 2;
 * @return {?proto.CRUser}
 */
proto.UpdateChatRoomNotify.prototype.getUser = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.UpdateChatRoomNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UpdateChatRoomNotify.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateChatRoomNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatRoomMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.ChatRoomMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomMessageRequest.displayName = 'proto.ChatRoomMessageRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatRoomMessageRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = msg.getSender()) && proto.CRUser.toObject(includeInstance, f),
    roomid: msg.getRoomid_asB64(),
    msgtype: jspb.Message.getField(msg, 3),
    msgcontent: msg.getMsgcontent_asB64(),
    clientparameter: msg.getClientparameter_asB64(),
    clientcache: msg.getClientcache_asB64(),
    createnotify: (f = msg.getCreatenotify()) && proto.CreateChatRoomNotify.toObject(includeInstance, f),
    joinnotify: (f = msg.getJoinnotify()) && proto.MemberJoinChatRoomNotify.toObject(includeInstance, f),
    quitnotify: (f = msg.getQuitnotify()) && proto.MemberQuitChatRoomNotify.toObject(includeInstance, f),
    kicknotify: (f = msg.getKicknotify()) && proto.KickMemberNotify.toObject(includeInstance, f),
    updatenotify: (f = msg.getUpdatenotify()) && proto.UpdateChatRoomNotify.toObject(includeInstance, f),
    propertylistList: jspb.Message.toObjectList(msg.getPropertylistList(),
    proto.CRPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomMessageRequest}
 */
proto.ChatRoomMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomMessageRequest;
  return proto.ChatRoomMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomMessageRequest}
 */
proto.ChatRoomMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgcontent(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientparameter(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientcache(value);
      break;
    case 7:
      var value = new proto.CreateChatRoomNotify;
      reader.readMessage(value,proto.CreateChatRoomNotify.deserializeBinaryFromReader);
      msg.setCreatenotify(value);
      break;
    case 8:
      var value = new proto.MemberJoinChatRoomNotify;
      reader.readMessage(value,proto.MemberJoinChatRoomNotify.deserializeBinaryFromReader);
      msg.setJoinnotify(value);
      break;
    case 9:
      var value = new proto.MemberQuitChatRoomNotify;
      reader.readMessage(value,proto.MemberQuitChatRoomNotify.deserializeBinaryFromReader);
      msg.setQuitnotify(value);
      break;
    case 10:
      var value = new proto.KickMemberNotify;
      reader.readMessage(value,proto.KickMemberNotify.deserializeBinaryFromReader);
      msg.setKicknotify(value);
      break;
    case 11:
      var value = new proto.UpdateChatRoomNotify;
      reader.readMessage(value,proto.UpdateChatRoomNotify.deserializeBinaryFromReader);
      msg.setUpdatenotify(value);
      break;
    case 12:
      var value = new proto.CRPair;
      reader.readMessage(value,proto.CRPair.deserializeBinaryFromReader);
      msg.addPropertylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCreatenotify();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.CreateChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getJoinnotify();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.MemberJoinChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getQuitnotify();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.MemberQuitChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getKicknotify();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.KickMemberNotify.serializeBinaryToWriter
    );
  }
  f = message.getUpdatenotify();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.UpdateChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getPropertylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.CRPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional CRUser sender = 1;
 * @return {?proto.CRUser}
 */
proto.ChatRoomMessageRequest.prototype.getSender = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 1));
};


/** @param {?proto.CRUser|undefined} value */
proto.ChatRoomMessageRequest.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ChatRoomMessageRequest.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes roomid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomMessageRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes roomid = 2;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ChatRoomMessageRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomMessageRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatRoomMessageRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 msgtype = 3;
 * @return {number}
 */
proto.ChatRoomMessageRequest.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatRoomMessageRequest.prototype.setMsgtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatRoomMessageRequest.prototype.clearMsgtype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasMsgtype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes msgcontent = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomMessageRequest.prototype.getMsgcontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msgcontent = 4;
 * This is a type-conversion wrapper around `getMsgcontent()`
 * @return {string}
 */
proto.ChatRoomMessageRequest.prototype.getMsgcontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgcontent()));
};


/**
 * optional bytes msgcontent = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgcontent()`
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageRequest.prototype.getMsgcontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgcontent()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomMessageRequest.prototype.setMsgcontent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatRoomMessageRequest.prototype.clearMsgcontent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasMsgcontent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes clientparameter = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomMessageRequest.prototype.getClientparameter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes clientparameter = 5;
 * This is a type-conversion wrapper around `getClientparameter()`
 * @return {string}
 */
proto.ChatRoomMessageRequest.prototype.getClientparameter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientparameter()));
};


/**
 * optional bytes clientparameter = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientparameter()`
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageRequest.prototype.getClientparameter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientparameter()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomMessageRequest.prototype.setClientparameter = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChatRoomMessageRequest.prototype.clearClientparameter = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasClientparameter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes clientcache = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomMessageRequest.prototype.getClientcache = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes clientcache = 6;
 * This is a type-conversion wrapper around `getClientcache()`
 * @return {string}
 */
proto.ChatRoomMessageRequest.prototype.getClientcache_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientcache()));
};


/**
 * optional bytes clientcache = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientcache()`
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageRequest.prototype.getClientcache_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientcache()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomMessageRequest.prototype.setClientcache = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatRoomMessageRequest.prototype.clearClientcache = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasClientcache = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CreateChatRoomNotify createnotify = 7;
 * @return {?proto.CreateChatRoomNotify}
 */
proto.ChatRoomMessageRequest.prototype.getCreatenotify = function() {
  return /** @type{?proto.CreateChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.CreateChatRoomNotify, 7));
};


/** @param {?proto.CreateChatRoomNotify|undefined} value */
proto.ChatRoomMessageRequest.prototype.setCreatenotify = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ChatRoomMessageRequest.prototype.clearCreatenotify = function() {
  this.setCreatenotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasCreatenotify = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MemberJoinChatRoomNotify joinnotify = 8;
 * @return {?proto.MemberJoinChatRoomNotify}
 */
proto.ChatRoomMessageRequest.prototype.getJoinnotify = function() {
  return /** @type{?proto.MemberJoinChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.MemberJoinChatRoomNotify, 8));
};


/** @param {?proto.MemberJoinChatRoomNotify|undefined} value */
proto.ChatRoomMessageRequest.prototype.setJoinnotify = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ChatRoomMessageRequest.prototype.clearJoinnotify = function() {
  this.setJoinnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasJoinnotify = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MemberQuitChatRoomNotify quitnotify = 9;
 * @return {?proto.MemberQuitChatRoomNotify}
 */
proto.ChatRoomMessageRequest.prototype.getQuitnotify = function() {
  return /** @type{?proto.MemberQuitChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.MemberQuitChatRoomNotify, 9));
};


/** @param {?proto.MemberQuitChatRoomNotify|undefined} value */
proto.ChatRoomMessageRequest.prototype.setQuitnotify = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.ChatRoomMessageRequest.prototype.clearQuitnotify = function() {
  this.setQuitnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasQuitnotify = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional KickMemberNotify kicknotify = 10;
 * @return {?proto.KickMemberNotify}
 */
proto.ChatRoomMessageRequest.prototype.getKicknotify = function() {
  return /** @type{?proto.KickMemberNotify} */ (
    jspb.Message.getWrapperField(this, proto.KickMemberNotify, 10));
};


/** @param {?proto.KickMemberNotify|undefined} value */
proto.ChatRoomMessageRequest.prototype.setKicknotify = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ChatRoomMessageRequest.prototype.clearKicknotify = function() {
  this.setKicknotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasKicknotify = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional UpdateChatRoomNotify updatenotify = 11;
 * @return {?proto.UpdateChatRoomNotify}
 */
proto.ChatRoomMessageRequest.prototype.getUpdatenotify = function() {
  return /** @type{?proto.UpdateChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.UpdateChatRoomNotify, 11));
};


/** @param {?proto.UpdateChatRoomNotify|undefined} value */
proto.ChatRoomMessageRequest.prototype.setUpdatenotify = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ChatRoomMessageRequest.prototype.clearUpdatenotify = function() {
  this.setUpdatenotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageRequest.prototype.hasUpdatenotify = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated CRPair propertylist = 12;
 * @return {!Array.<!proto.CRPair>}
 */
proto.ChatRoomMessageRequest.prototype.getPropertylistList = function() {
  return /** @type{!Array.<!proto.CRPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CRPair, 12));
};


/** @param {!Array.<!proto.CRPair>} value */
proto.ChatRoomMessageRequest.prototype.setPropertylistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.CRPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CRPair}
 */
proto.ChatRoomMessageRequest.prototype.addPropertylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.CRPair, opt_index);
};


proto.ChatRoomMessageRequest.prototype.clearPropertylistList = function() {
  this.setPropertylistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomMessageResponse.displayName = 'proto.ChatRoomMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomMessageResponse}
 */
proto.ChatRoomMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomMessageResponse;
  return proto.ChatRoomMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomMessageResponse}
 */
proto.ChatRoomMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 msgid = 1;
 * @return {number}
 */
proto.ChatRoomMessageResponse.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatRoomMessageResponse.prototype.setMsgid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomMessageResponse.prototype.clearMsgid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMessageResponse.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomNewMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomNewMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomNewMsg.displayName = 'proto.ChatRoomNewMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomNewMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomNewMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomNewMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomNewMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    sender: (f = msg.getSender()) && proto.CRUser.toObject(includeInstance, f),
    msgtype: jspb.Message.getField(msg, 3),
    msgcontent: msg.getMsgcontent_asB64(),
    regmemcount: jspb.Message.getField(msg, 5),
    memcount: jspb.Message.getField(msg, 6),
    msgid: jspb.Message.getField(msg, 7),
    maxid: jspb.Message.getField(msg, 8),
    timestamp: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomNewMsg}
 */
proto.ChatRoomNewMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomNewMsg;
  return proto.ChatRoomNewMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomNewMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomNewMsg}
 */
proto.ChatRoomNewMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.CRUser;
      reader.readMessage(value,proto.CRUser.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgcontent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegmemcount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomNewMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomNewMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomNewMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomNewMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CRUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomNewMsg.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ChatRoomNewMsg.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ChatRoomNewMsg.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomNewMsg.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomNewMsg.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CRUser sender = 2;
 * @return {?proto.CRUser}
 */
proto.ChatRoomNewMsg.prototype.getSender = function() {
  return /** @type{?proto.CRUser} */ (
    jspb.Message.getWrapperField(this, proto.CRUser, 2));
};


/** @param {?proto.CRUser|undefined} value */
proto.ChatRoomNewMsg.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChatRoomNewMsg.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasSender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 msgtype = 3;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setMsgtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatRoomNewMsg.prototype.clearMsgtype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasMsgtype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes msgcontent = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomNewMsg.prototype.getMsgcontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msgcontent = 4;
 * This is a type-conversion wrapper around `getMsgcontent()`
 * @return {string}
 */
proto.ChatRoomNewMsg.prototype.getMsgcontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgcontent()));
};


/**
 * optional bytes msgcontent = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgcontent()`
 * @return {!Uint8Array}
 */
proto.ChatRoomNewMsg.prototype.getMsgcontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgcontent()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomNewMsg.prototype.setMsgcontent = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatRoomNewMsg.prototype.clearMsgcontent = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasMsgcontent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 regmemcount = 5;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getRegmemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setRegmemcount = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChatRoomNewMsg.prototype.clearRegmemcount = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasRegmemcount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 memcount = 6;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getMemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setMemcount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatRoomNewMsg.prototype.clearMemcount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasMemcount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 msgid = 7;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setMsgid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ChatRoomNewMsg.prototype.clearMsgid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 maxid = 8;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setMaxid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.ChatRoomNewMsg.prototype.clearMaxid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 timestamp = 9;
 * @return {number}
 */
proto.ChatRoomNewMsg.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ChatRoomNewMsg.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.ChatRoomNewMsg.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomNewMsg.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomErrorMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomErrorMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomErrorMsg.displayName = 'proto.ChatRoomErrorMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomErrorMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomErrorMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomErrorMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomErrorMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    clientsn: jspb.Message.getField(msg, 2),
    errorcode: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomErrorMsg}
 */
proto.ChatRoomErrorMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomErrorMsg;
  return proto.ChatRoomErrorMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomErrorMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomErrorMsg}
 */
proto.ChatRoomErrorMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientsn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomErrorMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomErrorMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomErrorMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomErrorMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomErrorMsg.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ChatRoomErrorMsg.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ChatRoomErrorMsg.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomErrorMsg.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomErrorMsg.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomErrorMsg.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 clientsn = 2;
 * @return {number}
 */
proto.ChatRoomErrorMsg.prototype.getClientsn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChatRoomErrorMsg.prototype.setClientsn = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatRoomErrorMsg.prototype.clearClientsn = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomErrorMsg.prototype.hasClientsn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 errorcode = 3;
 * @return {number}
 */
proto.ChatRoomErrorMsg.prototype.getErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatRoomErrorMsg.prototype.setErrorcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatRoomErrorMsg.prototype.clearErrorcode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomErrorMsg.prototype.hasErrorcode = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomMNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomMNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomMNotify.displayName = 'proto.ChatRoomMNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomMNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomMNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomMNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    data: msg.getData_asB64(),
    regmemcount: jspb.Message.getField(msg, 3),
    memcount: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomMNotify}
 */
proto.ChatRoomMNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomMNotify;
  return proto.ChatRoomMNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomMNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomMNotify}
 */
proto.ChatRoomMNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegmemcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomMNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomMNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomMNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomMNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.ChatRoomMNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatRoomMNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomMNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomMNotify.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ChatRoomMNotify.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * required bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ChatRoomMNotify.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomMNotify.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatRoomMNotify.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMNotify.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 regmemcount = 3;
 * @return {number}
 */
proto.ChatRoomMNotify.prototype.getRegmemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ChatRoomMNotify.prototype.setRegmemcount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ChatRoomMNotify.prototype.clearRegmemcount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMNotify.prototype.hasRegmemcount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 memcount = 4;
 * @return {number}
 */
proto.ChatRoomMNotify.prototype.getMemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ChatRoomMNotify.prototype.setMemcount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatRoomMNotify.prototype.clearMemcount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomMNotify.prototype.hasMemcount = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubscribeRequest.displayName = 'proto.SubscribeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    sub: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubscribeRequest}
 */
proto.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubscribeRequest;
  return proto.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubscribeRequest}
 */
proto.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.SubscribeRequest.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.SubscribeRequest.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.SubscribeRequest.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.SubscribeRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SubscribeRequest.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubscribeRequest.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool sub = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SubscribeRequest.prototype.getSub = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SubscribeRequest.prototype.setSub = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SubscribeRequest.prototype.clearSub = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubscribeRequest.prototype.hasSub = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubscribeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubscribeResponse.displayName = 'proto.SubscribeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubscribeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SubscribeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubscribeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    sub: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubscribeResponse}
 */
proto.SubscribeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubscribeResponse;
  return proto.SubscribeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubscribeResponse}
 */
proto.SubscribeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubscribeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubscribeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SubscribeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.SubscribeResponse.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.SubscribeResponse.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.SubscribeResponse.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.SubscribeResponse.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SubscribeResponse.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubscribeResponse.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool sub = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SubscribeResponse.prototype.getSub = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SubscribeResponse.prototype.setSub = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SubscribeResponse.prototype.clearSub = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SubscribeResponse.prototype.hasSub = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomUpToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomUpToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomUpToServer.displayName = 'proto.ChatRoomUpToServer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomUpToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomUpToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomUpToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomUpToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadtype: jspb.Message.getField(msg, 1),
    createchatroomreq: (f = msg.getCreatechatroomreq()) && proto.CreateChatRoomRequest.toObject(includeInstance, f),
    getchatroominforeq: (f = msg.getGetchatroominforeq()) && proto.GetChatRoomDetailRequest.toObject(includeInstance, f),
    applyjoinchatroomreq: (f = msg.getApplyjoinchatroomreq()) && proto.ApplyJoinChatRoomRequest.toObject(includeInstance, f),
    quitchatroomreq: (f = msg.getQuitchatroomreq()) && proto.QuitChatRoomRequest.toObject(includeInstance, f),
    updatechatroomreq: (f = msg.getUpdatechatroomreq()) && proto.UpdateChatRoomRequest.toObject(includeInstance, f),
    kickmemberreq: (f = msg.getKickmemberreq()) && proto.KickChatRoomMemberRequest.toObject(includeInstance, f),
    querychatroomidreq: (f = msg.getQuerychatroomidreq()) && proto.QueryChatRoomIDRequest.toObject(includeInstance, f),
    updategameidreq: (f = msg.getUpdategameidreq()) && proto.UpdateRoomIDRequest.toObject(includeInstance, f),
    queryallgameroomreq: (f = msg.getQueryallgameroomreq()) && proto.QueryAllGameRoomRequest.toObject(includeInstance, f),
    chatroommessagereq: (f = msg.getChatroommessagereq()) && proto.ChatRoomMessageRequest.toObject(includeInstance, f),
    createrooms: (f = msg.getCreaterooms()) && proto.CreateMultiChatRoomRequest.toObject(includeInstance, f),
    syncroomtodba: (f = msg.getSyncroomtodba()) && proto.SyncRoomToDBRequest.toObject(includeInstance, f),
    subreq: (f = msg.getSubreq()) && proto.SubscribeRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomUpToServer}
 */
proto.ChatRoomUpToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomUpToServer;
  return proto.ChatRoomUpToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomUpToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomUpToServer}
 */
proto.ChatRoomUpToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayloadtype(value);
      break;
    case 2:
      var value = new proto.CreateChatRoomRequest;
      reader.readMessage(value,proto.CreateChatRoomRequest.deserializeBinaryFromReader);
      msg.setCreatechatroomreq(value);
      break;
    case 3:
      var value = new proto.GetChatRoomDetailRequest;
      reader.readMessage(value,proto.GetChatRoomDetailRequest.deserializeBinaryFromReader);
      msg.setGetchatroominforeq(value);
      break;
    case 4:
      var value = new proto.ApplyJoinChatRoomRequest;
      reader.readMessage(value,proto.ApplyJoinChatRoomRequest.deserializeBinaryFromReader);
      msg.setApplyjoinchatroomreq(value);
      break;
    case 5:
      var value = new proto.QuitChatRoomRequest;
      reader.readMessage(value,proto.QuitChatRoomRequest.deserializeBinaryFromReader);
      msg.setQuitchatroomreq(value);
      break;
    case 6:
      var value = new proto.UpdateChatRoomRequest;
      reader.readMessage(value,proto.UpdateChatRoomRequest.deserializeBinaryFromReader);
      msg.setUpdatechatroomreq(value);
      break;
    case 7:
      var value = new proto.KickChatRoomMemberRequest;
      reader.readMessage(value,proto.KickChatRoomMemberRequest.deserializeBinaryFromReader);
      msg.setKickmemberreq(value);
      break;
    case 8:
      var value = new proto.QueryChatRoomIDRequest;
      reader.readMessage(value,proto.QueryChatRoomIDRequest.deserializeBinaryFromReader);
      msg.setQuerychatroomidreq(value);
      break;
    case 9:
      var value = new proto.UpdateRoomIDRequest;
      reader.readMessage(value,proto.UpdateRoomIDRequest.deserializeBinaryFromReader);
      msg.setUpdategameidreq(value);
      break;
    case 10:
      var value = new proto.QueryAllGameRoomRequest;
      reader.readMessage(value,proto.QueryAllGameRoomRequest.deserializeBinaryFromReader);
      msg.setQueryallgameroomreq(value);
      break;
    case 11:
      var value = new proto.ChatRoomMessageRequest;
      reader.readMessage(value,proto.ChatRoomMessageRequest.deserializeBinaryFromReader);
      msg.setChatroommessagereq(value);
      break;
    case 12:
      var value = new proto.CreateMultiChatRoomRequest;
      reader.readMessage(value,proto.CreateMultiChatRoomRequest.deserializeBinaryFromReader);
      msg.setCreaterooms(value);
      break;
    case 13:
      var value = new proto.SyncRoomToDBRequest;
      reader.readMessage(value,proto.SyncRoomToDBRequest.deserializeBinaryFromReader);
      msg.setSyncroomtodba(value);
      break;
    case 14:
      var value = new proto.SubscribeRequest;
      reader.readMessage(value,proto.SubscribeRequest.deserializeBinaryFromReader);
      msg.setSubreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomUpToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomUpToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomUpToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomUpToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCreatechatroomreq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CreateChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetchatroominforeq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GetChatRoomDetailRequest.serializeBinaryToWriter
    );
  }
  f = message.getApplyjoinchatroomreq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ApplyJoinChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getQuitchatroomreq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.QuitChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getUpdatechatroomreq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.UpdateChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getKickmemberreq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.KickChatRoomMemberRequest.serializeBinaryToWriter
    );
  }
  f = message.getQuerychatroomidreq();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.QueryChatRoomIDRequest.serializeBinaryToWriter
    );
  }
  f = message.getUpdategameidreq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.UpdateRoomIDRequest.serializeBinaryToWriter
    );
  }
  f = message.getQueryallgameroomreq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.QueryAllGameRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getChatroommessagereq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ChatRoomMessageRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreaterooms();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.CreateMultiChatRoomRequest.serializeBinaryToWriter
    );
  }
  f = message.getSyncroomtodba();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.SyncRoomToDBRequest.serializeBinaryToWriter
    );
  }
  f = message.getSubreq();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.SubscribeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 payloadtype = 1;
 * @return {number}
 */
proto.ChatRoomUpToServer.prototype.getPayloadtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatRoomUpToServer.prototype.setPayloadtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomUpToServer.prototype.clearPayloadtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasPayloadtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateChatRoomRequest createchatroomreq = 2;
 * @return {?proto.CreateChatRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getCreatechatroomreq = function() {
  return /** @type{?proto.CreateChatRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.CreateChatRoomRequest, 2));
};


/** @param {?proto.CreateChatRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setCreatechatroomreq = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChatRoomUpToServer.prototype.clearCreatechatroomreq = function() {
  this.setCreatechatroomreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasCreatechatroomreq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetChatRoomDetailRequest getchatroominforeq = 3;
 * @return {?proto.GetChatRoomDetailRequest}
 */
proto.ChatRoomUpToServer.prototype.getGetchatroominforeq = function() {
  return /** @type{?proto.GetChatRoomDetailRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetChatRoomDetailRequest, 3));
};


/** @param {?proto.GetChatRoomDetailRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setGetchatroominforeq = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ChatRoomUpToServer.prototype.clearGetchatroominforeq = function() {
  this.setGetchatroominforeq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasGetchatroominforeq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
 * @return {?proto.ApplyJoinChatRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getApplyjoinchatroomreq = function() {
  return /** @type{?proto.ApplyJoinChatRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.ApplyJoinChatRoomRequest, 4));
};


/** @param {?proto.ApplyJoinChatRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setApplyjoinchatroomreq = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ChatRoomUpToServer.prototype.clearApplyjoinchatroomreq = function() {
  this.setApplyjoinchatroomreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasApplyjoinchatroomreq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional QuitChatRoomRequest quitchatroomreq = 5;
 * @return {?proto.QuitChatRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getQuitchatroomreq = function() {
  return /** @type{?proto.QuitChatRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.QuitChatRoomRequest, 5));
};


/** @param {?proto.QuitChatRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setQuitchatroomreq = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ChatRoomUpToServer.prototype.clearQuitchatroomreq = function() {
  this.setQuitchatroomreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasQuitchatroomreq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateChatRoomRequest updatechatroomreq = 6;
 * @return {?proto.UpdateChatRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getUpdatechatroomreq = function() {
  return /** @type{?proto.UpdateChatRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.UpdateChatRoomRequest, 6));
};


/** @param {?proto.UpdateChatRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setUpdatechatroomreq = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.ChatRoomUpToServer.prototype.clearUpdatechatroomreq = function() {
  this.setUpdatechatroomreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasUpdatechatroomreq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional KickChatRoomMemberRequest kickmemberreq = 7;
 * @return {?proto.KickChatRoomMemberRequest}
 */
proto.ChatRoomUpToServer.prototype.getKickmemberreq = function() {
  return /** @type{?proto.KickChatRoomMemberRequest} */ (
    jspb.Message.getWrapperField(this, proto.KickChatRoomMemberRequest, 7));
};


/** @param {?proto.KickChatRoomMemberRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setKickmemberreq = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ChatRoomUpToServer.prototype.clearKickmemberreq = function() {
  this.setKickmemberreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasKickmemberreq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional QueryChatRoomIDRequest querychatroomidreq = 8;
 * @return {?proto.QueryChatRoomIDRequest}
 */
proto.ChatRoomUpToServer.prototype.getQuerychatroomidreq = function() {
  return /** @type{?proto.QueryChatRoomIDRequest} */ (
    jspb.Message.getWrapperField(this, proto.QueryChatRoomIDRequest, 8));
};


/** @param {?proto.QueryChatRoomIDRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setQuerychatroomidreq = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ChatRoomUpToServer.prototype.clearQuerychatroomidreq = function() {
  this.setQuerychatroomidreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasQuerychatroomidreq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UpdateRoomIDRequest updategameidreq = 9;
 * @return {?proto.UpdateRoomIDRequest}
 */
proto.ChatRoomUpToServer.prototype.getUpdategameidreq = function() {
  return /** @type{?proto.UpdateRoomIDRequest} */ (
    jspb.Message.getWrapperField(this, proto.UpdateRoomIDRequest, 9));
};


/** @param {?proto.UpdateRoomIDRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setUpdategameidreq = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.ChatRoomUpToServer.prototype.clearUpdategameidreq = function() {
  this.setUpdategameidreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasUpdategameidreq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional QueryAllGameRoomRequest queryallgameroomreq = 10;
 * @return {?proto.QueryAllGameRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getQueryallgameroomreq = function() {
  return /** @type{?proto.QueryAllGameRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.QueryAllGameRoomRequest, 10));
};


/** @param {?proto.QueryAllGameRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setQueryallgameroomreq = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ChatRoomUpToServer.prototype.clearQueryallgameroomreq = function() {
  this.setQueryallgameroomreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasQueryallgameroomreq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ChatRoomMessageRequest chatroommessagereq = 11;
 * @return {?proto.ChatRoomMessageRequest}
 */
proto.ChatRoomUpToServer.prototype.getChatroommessagereq = function() {
  return /** @type{?proto.ChatRoomMessageRequest} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomMessageRequest, 11));
};


/** @param {?proto.ChatRoomMessageRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setChatroommessagereq = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ChatRoomUpToServer.prototype.clearChatroommessagereq = function() {
  this.setChatroommessagereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasChatroommessagereq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CreateMultiChatRoomRequest createrooms = 12;
 * @return {?proto.CreateMultiChatRoomRequest}
 */
proto.ChatRoomUpToServer.prototype.getCreaterooms = function() {
  return /** @type{?proto.CreateMultiChatRoomRequest} */ (
    jspb.Message.getWrapperField(this, proto.CreateMultiChatRoomRequest, 12));
};


/** @param {?proto.CreateMultiChatRoomRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setCreaterooms = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.ChatRoomUpToServer.prototype.clearCreaterooms = function() {
  this.setCreaterooms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasCreaterooms = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SyncRoomToDBRequest syncroomtodba = 13;
 * @return {?proto.SyncRoomToDBRequest}
 */
proto.ChatRoomUpToServer.prototype.getSyncroomtodba = function() {
  return /** @type{?proto.SyncRoomToDBRequest} */ (
    jspb.Message.getWrapperField(this, proto.SyncRoomToDBRequest, 13));
};


/** @param {?proto.SyncRoomToDBRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setSyncroomtodba = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.ChatRoomUpToServer.prototype.clearSyncroomtodba = function() {
  this.setSyncroomtodba(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasSyncroomtodba = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SubscribeRequest subreq = 14;
 * @return {?proto.SubscribeRequest}
 */
proto.ChatRoomUpToServer.prototype.getSubreq = function() {
  return /** @type{?proto.SubscribeRequest} */ (
    jspb.Message.getWrapperField(this, proto.SubscribeRequest, 14));
};


/** @param {?proto.SubscribeRequest|undefined} value */
proto.ChatRoomUpToServer.prototype.setSubreq = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.ChatRoomUpToServer.prototype.clearSubreq = function() {
  this.setSubreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomUpToServer.prototype.hasSubreq = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomDownToUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatRoomDownToUser.repeatedFields_, null);
};
goog.inherits(proto.ChatRoomDownToUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomDownToUser.displayName = 'proto.ChatRoomDownToUser';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatRoomDownToUser.repeatedFields_ = [200];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomDownToUser.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomDownToUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomDownToUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomDownToUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1),
    payloadtype: jspb.Message.getField(msg, 2),
    createchatroomresp: (f = msg.getCreatechatroomresp()) && proto.CreateChatRoomResponse.toObject(includeInstance, f),
    getchatroominforesp: (f = msg.getGetchatroominforesp()) && proto.GetChatRoomDetailResponse.toObject(includeInstance, f),
    applyjoinchatroomresp: (f = msg.getApplyjoinchatroomresp()) && proto.ApplyJoinChatRoomResponse.toObject(includeInstance, f),
    quitchatroomresp: (f = msg.getQuitchatroomresp()) && proto.QuitChatRoomResponse.toObject(includeInstance, f),
    updatechatroomresp: (f = msg.getUpdatechatroomresp()) && proto.UpdateChatRoomResponse.toObject(includeInstance, f),
    kickmemberresp: (f = msg.getKickmemberresp()) && proto.KickChatRoomMemberResponse.toObject(includeInstance, f),
    querychatroomidresp: (f = msg.getQuerychatroomidresp()) && proto.QueryChatRoomIDResponse.toObject(includeInstance, f),
    updategameidresp: (f = msg.getUpdategameidresp()) && proto.UpdateRoomIDResponse.toObject(includeInstance, f),
    queryallgameroomresp: (f = msg.getQueryallgameroomresp()) && proto.QueryAllGameRoomResponse.toObject(includeInstance, f),
    chatroommessageresp: (f = msg.getChatroommessageresp()) && proto.ChatRoomMessageResponse.toObject(includeInstance, f),
    newmsgnotify: (f = msg.getNewmsgnotify()) && proto.ChatRoomNewMsg.toObject(includeInstance, f),
    errormsgnotify: (f = msg.getErrormsgnotify()) && proto.ChatRoomErrorMsg.toObject(includeInstance, f),
    createrooms: (f = msg.getCreaterooms()) && proto.CreateMultiChatRoomResponse.toObject(includeInstance, f),
    memberjoinnotify: (f = msg.getMemberjoinnotify()) && proto.MemberJoinChatRoomNotify.toObject(includeInstance, f),
    memberquitnotify: (f = msg.getMemberquitnotify()) && proto.MemberQuitChatRoomNotify.toObject(includeInstance, f),
    subresp: (f = msg.getSubresp()) && proto.SubscribeResponse.toObject(includeInstance, f),
    reason: msg.getReason_asB64(),
    multinotifyList: jspb.Message.toObjectList(msg.getMultinotifyList(),
    proto.ChatRoomMNotify.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomDownToUser}
 */
proto.ChatRoomDownToUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomDownToUser;
  return proto.ChatRoomDownToUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomDownToUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomDownToUser}
 */
proto.ChatRoomDownToUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayloadtype(value);
      break;
    case 3:
      var value = new proto.CreateChatRoomResponse;
      reader.readMessage(value,proto.CreateChatRoomResponse.deserializeBinaryFromReader);
      msg.setCreatechatroomresp(value);
      break;
    case 4:
      var value = new proto.GetChatRoomDetailResponse;
      reader.readMessage(value,proto.GetChatRoomDetailResponse.deserializeBinaryFromReader);
      msg.setGetchatroominforesp(value);
      break;
    case 5:
      var value = new proto.ApplyJoinChatRoomResponse;
      reader.readMessage(value,proto.ApplyJoinChatRoomResponse.deserializeBinaryFromReader);
      msg.setApplyjoinchatroomresp(value);
      break;
    case 6:
      var value = new proto.QuitChatRoomResponse;
      reader.readMessage(value,proto.QuitChatRoomResponse.deserializeBinaryFromReader);
      msg.setQuitchatroomresp(value);
      break;
    case 7:
      var value = new proto.UpdateChatRoomResponse;
      reader.readMessage(value,proto.UpdateChatRoomResponse.deserializeBinaryFromReader);
      msg.setUpdatechatroomresp(value);
      break;
    case 8:
      var value = new proto.KickChatRoomMemberResponse;
      reader.readMessage(value,proto.KickChatRoomMemberResponse.deserializeBinaryFromReader);
      msg.setKickmemberresp(value);
      break;
    case 9:
      var value = new proto.QueryChatRoomIDResponse;
      reader.readMessage(value,proto.QueryChatRoomIDResponse.deserializeBinaryFromReader);
      msg.setQuerychatroomidresp(value);
      break;
    case 10:
      var value = new proto.UpdateRoomIDResponse;
      reader.readMessage(value,proto.UpdateRoomIDResponse.deserializeBinaryFromReader);
      msg.setUpdategameidresp(value);
      break;
    case 11:
      var value = new proto.QueryAllGameRoomResponse;
      reader.readMessage(value,proto.QueryAllGameRoomResponse.deserializeBinaryFromReader);
      msg.setQueryallgameroomresp(value);
      break;
    case 12:
      var value = new proto.ChatRoomMessageResponse;
      reader.readMessage(value,proto.ChatRoomMessageResponse.deserializeBinaryFromReader);
      msg.setChatroommessageresp(value);
      break;
    case 13:
      var value = new proto.ChatRoomNewMsg;
      reader.readMessage(value,proto.ChatRoomNewMsg.deserializeBinaryFromReader);
      msg.setNewmsgnotify(value);
      break;
    case 14:
      var value = new proto.ChatRoomErrorMsg;
      reader.readMessage(value,proto.ChatRoomErrorMsg.deserializeBinaryFromReader);
      msg.setErrormsgnotify(value);
      break;
    case 15:
      var value = new proto.CreateMultiChatRoomResponse;
      reader.readMessage(value,proto.CreateMultiChatRoomResponse.deserializeBinaryFromReader);
      msg.setCreaterooms(value);
      break;
    case 16:
      var value = new proto.MemberJoinChatRoomNotify;
      reader.readMessage(value,proto.MemberJoinChatRoomNotify.deserializeBinaryFromReader);
      msg.setMemberjoinnotify(value);
      break;
    case 17:
      var value = new proto.MemberQuitChatRoomNotify;
      reader.readMessage(value,proto.MemberQuitChatRoomNotify.deserializeBinaryFromReader);
      msg.setMemberquitnotify(value);
      break;
    case 18:
      var value = new proto.SubscribeResponse;
      reader.readMessage(value,proto.SubscribeResponse.deserializeBinaryFromReader);
      msg.setSubresp(value);
      break;
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReason(value);
      break;
    case 200:
      var value = new proto.ChatRoomMNotify;
      reader.readMessage(value,proto.ChatRoomMNotify.deserializeBinaryFromReader);
      msg.addMultinotify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomDownToUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomDownToUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomDownToUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomDownToUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCreatechatroomresp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CreateChatRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetchatroominforesp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GetChatRoomDetailResponse.serializeBinaryToWriter
    );
  }
  f = message.getApplyjoinchatroomresp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ApplyJoinChatRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getQuitchatroomresp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.QuitChatRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getUpdatechatroomresp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.UpdateChatRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getKickmemberresp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.KickChatRoomMemberResponse.serializeBinaryToWriter
    );
  }
  f = message.getQuerychatroomidresp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.QueryChatRoomIDResponse.serializeBinaryToWriter
    );
  }
  f = message.getUpdategameidresp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.UpdateRoomIDResponse.serializeBinaryToWriter
    );
  }
  f = message.getQueryallgameroomresp();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.QueryAllGameRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getChatroommessageresp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ChatRoomMessageResponse.serializeBinaryToWriter
    );
  }
  f = message.getNewmsgnotify();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ChatRoomNewMsg.serializeBinaryToWriter
    );
  }
  f = message.getErrormsgnotify();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.ChatRoomErrorMsg.serializeBinaryToWriter
    );
  }
  f = message.getCreaterooms();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.CreateMultiChatRoomResponse.serializeBinaryToWriter
    );
  }
  f = message.getMemberjoinnotify();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.MemberJoinChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getMemberquitnotify();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.MemberQuitChatRoomNotify.serializeBinaryToWriter
    );
  }
  f = message.getSubresp();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.SubscribeResponse.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeBytes(
      100,
      f
    );
  }
  f = message.getMultinotifyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      200,
      f,
      proto.ChatRoomMNotify.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 result = 1;
 * @return {number}
 */
proto.ChatRoomDownToUser.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatRoomDownToUser.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomDownToUser.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 payloadtype = 2;
 * @return {number}
 */
proto.ChatRoomDownToUser.prototype.getPayloadtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ChatRoomDownToUser.prototype.setPayloadtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ChatRoomDownToUser.prototype.clearPayloadtype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasPayloadtype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CreateChatRoomResponse createchatroomresp = 3;
 * @return {?proto.CreateChatRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getCreatechatroomresp = function() {
  return /** @type{?proto.CreateChatRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.CreateChatRoomResponse, 3));
};


/** @param {?proto.CreateChatRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setCreatechatroomresp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ChatRoomDownToUser.prototype.clearCreatechatroomresp = function() {
  this.setCreatechatroomresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasCreatechatroomresp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetChatRoomDetailResponse getchatroominforesp = 4;
 * @return {?proto.GetChatRoomDetailResponse}
 */
proto.ChatRoomDownToUser.prototype.getGetchatroominforesp = function() {
  return /** @type{?proto.GetChatRoomDetailResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetChatRoomDetailResponse, 4));
};


/** @param {?proto.GetChatRoomDetailResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setGetchatroominforesp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ChatRoomDownToUser.prototype.clearGetchatroominforesp = function() {
  this.setGetchatroominforesp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasGetchatroominforesp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
 * @return {?proto.ApplyJoinChatRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getApplyjoinchatroomresp = function() {
  return /** @type{?proto.ApplyJoinChatRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.ApplyJoinChatRoomResponse, 5));
};


/** @param {?proto.ApplyJoinChatRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setApplyjoinchatroomresp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ChatRoomDownToUser.prototype.clearApplyjoinchatroomresp = function() {
  this.setApplyjoinchatroomresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasApplyjoinchatroomresp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional QuitChatRoomResponse quitchatroomresp = 6;
 * @return {?proto.QuitChatRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getQuitchatroomresp = function() {
  return /** @type{?proto.QuitChatRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.QuitChatRoomResponse, 6));
};


/** @param {?proto.QuitChatRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setQuitchatroomresp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.ChatRoomDownToUser.prototype.clearQuitchatroomresp = function() {
  this.setQuitchatroomresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasQuitchatroomresp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UpdateChatRoomResponse updatechatroomresp = 7;
 * @return {?proto.UpdateChatRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getUpdatechatroomresp = function() {
  return /** @type{?proto.UpdateChatRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.UpdateChatRoomResponse, 7));
};


/** @param {?proto.UpdateChatRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setUpdatechatroomresp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ChatRoomDownToUser.prototype.clearUpdatechatroomresp = function() {
  this.setUpdatechatroomresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasUpdatechatroomresp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional KickChatRoomMemberResponse kickmemberresp = 8;
 * @return {?proto.KickChatRoomMemberResponse}
 */
proto.ChatRoomDownToUser.prototype.getKickmemberresp = function() {
  return /** @type{?proto.KickChatRoomMemberResponse} */ (
    jspb.Message.getWrapperField(this, proto.KickChatRoomMemberResponse, 8));
};


/** @param {?proto.KickChatRoomMemberResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setKickmemberresp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ChatRoomDownToUser.prototype.clearKickmemberresp = function() {
  this.setKickmemberresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasKickmemberresp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional QueryChatRoomIDResponse querychatroomidresp = 9;
 * @return {?proto.QueryChatRoomIDResponse}
 */
proto.ChatRoomDownToUser.prototype.getQuerychatroomidresp = function() {
  return /** @type{?proto.QueryChatRoomIDResponse} */ (
    jspb.Message.getWrapperField(this, proto.QueryChatRoomIDResponse, 9));
};


/** @param {?proto.QueryChatRoomIDResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setQuerychatroomidresp = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.ChatRoomDownToUser.prototype.clearQuerychatroomidresp = function() {
  this.setQuerychatroomidresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasQuerychatroomidresp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional UpdateRoomIDResponse updategameidresp = 10;
 * @return {?proto.UpdateRoomIDResponse}
 */
proto.ChatRoomDownToUser.prototype.getUpdategameidresp = function() {
  return /** @type{?proto.UpdateRoomIDResponse} */ (
    jspb.Message.getWrapperField(this, proto.UpdateRoomIDResponse, 10));
};


/** @param {?proto.UpdateRoomIDResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setUpdategameidresp = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.ChatRoomDownToUser.prototype.clearUpdategameidresp = function() {
  this.setUpdategameidresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasUpdategameidresp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional QueryAllGameRoomResponse queryallgameroomresp = 11;
 * @return {?proto.QueryAllGameRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getQueryallgameroomresp = function() {
  return /** @type{?proto.QueryAllGameRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.QueryAllGameRoomResponse, 11));
};


/** @param {?proto.QueryAllGameRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setQueryallgameroomresp = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ChatRoomDownToUser.prototype.clearQueryallgameroomresp = function() {
  this.setQueryallgameroomresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasQueryallgameroomresp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ChatRoomMessageResponse chatroommessageresp = 12;
 * @return {?proto.ChatRoomMessageResponse}
 */
proto.ChatRoomDownToUser.prototype.getChatroommessageresp = function() {
  return /** @type{?proto.ChatRoomMessageResponse} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomMessageResponse, 12));
};


/** @param {?proto.ChatRoomMessageResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setChatroommessageresp = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.ChatRoomDownToUser.prototype.clearChatroommessageresp = function() {
  this.setChatroommessageresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasChatroommessageresp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ChatRoomNewMsg newmsgnotify = 13;
 * @return {?proto.ChatRoomNewMsg}
 */
proto.ChatRoomDownToUser.prototype.getNewmsgnotify = function() {
  return /** @type{?proto.ChatRoomNewMsg} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomNewMsg, 13));
};


/** @param {?proto.ChatRoomNewMsg|undefined} value */
proto.ChatRoomDownToUser.prototype.setNewmsgnotify = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.ChatRoomDownToUser.prototype.clearNewmsgnotify = function() {
  this.setNewmsgnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasNewmsgnotify = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ChatRoomErrorMsg errormsgnotify = 14;
 * @return {?proto.ChatRoomErrorMsg}
 */
proto.ChatRoomDownToUser.prototype.getErrormsgnotify = function() {
  return /** @type{?proto.ChatRoomErrorMsg} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomErrorMsg, 14));
};


/** @param {?proto.ChatRoomErrorMsg|undefined} value */
proto.ChatRoomDownToUser.prototype.setErrormsgnotify = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.ChatRoomDownToUser.prototype.clearErrormsgnotify = function() {
  this.setErrormsgnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasErrormsgnotify = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CreateMultiChatRoomResponse createrooms = 15;
 * @return {?proto.CreateMultiChatRoomResponse}
 */
proto.ChatRoomDownToUser.prototype.getCreaterooms = function() {
  return /** @type{?proto.CreateMultiChatRoomResponse} */ (
    jspb.Message.getWrapperField(this, proto.CreateMultiChatRoomResponse, 15));
};


/** @param {?proto.CreateMultiChatRoomResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setCreaterooms = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.ChatRoomDownToUser.prototype.clearCreaterooms = function() {
  this.setCreaterooms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasCreaterooms = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional MemberJoinChatRoomNotify memberjoinnotify = 16;
 * @return {?proto.MemberJoinChatRoomNotify}
 */
proto.ChatRoomDownToUser.prototype.getMemberjoinnotify = function() {
  return /** @type{?proto.MemberJoinChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.MemberJoinChatRoomNotify, 16));
};


/** @param {?proto.MemberJoinChatRoomNotify|undefined} value */
proto.ChatRoomDownToUser.prototype.setMemberjoinnotify = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.ChatRoomDownToUser.prototype.clearMemberjoinnotify = function() {
  this.setMemberjoinnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasMemberjoinnotify = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional MemberQuitChatRoomNotify memberquitnotify = 17;
 * @return {?proto.MemberQuitChatRoomNotify}
 */
proto.ChatRoomDownToUser.prototype.getMemberquitnotify = function() {
  return /** @type{?proto.MemberQuitChatRoomNotify} */ (
    jspb.Message.getWrapperField(this, proto.MemberQuitChatRoomNotify, 17));
};


/** @param {?proto.MemberQuitChatRoomNotify|undefined} value */
proto.ChatRoomDownToUser.prototype.setMemberquitnotify = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.ChatRoomDownToUser.prototype.clearMemberquitnotify = function() {
  this.setMemberquitnotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasMemberquitnotify = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SubscribeResponse subresp = 18;
 * @return {?proto.SubscribeResponse}
 */
proto.ChatRoomDownToUser.prototype.getSubresp = function() {
  return /** @type{?proto.SubscribeResponse} */ (
    jspb.Message.getWrapperField(this, proto.SubscribeResponse, 18));
};


/** @param {?proto.SubscribeResponse|undefined} value */
proto.ChatRoomDownToUser.prototype.setSubresp = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.ChatRoomDownToUser.prototype.clearSubresp = function() {
  this.setSubresp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasSubresp = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bytes reason = 100;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomDownToUser.prototype.getReason = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes reason = 100;
 * This is a type-conversion wrapper around `getReason()`
 * @return {string}
 */
proto.ChatRoomDownToUser.prototype.getReason_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReason()));
};


/**
 * optional bytes reason = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReason()`
 * @return {!Uint8Array}
 */
proto.ChatRoomDownToUser.prototype.getReason_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReason()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomDownToUser.prototype.setReason = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.ChatRoomDownToUser.prototype.clearReason = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomDownToUser.prototype.hasReason = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * repeated ChatRoomMNotify multinotify = 200;
 * @return {!Array.<!proto.ChatRoomMNotify>}
 */
proto.ChatRoomDownToUser.prototype.getMultinotifyList = function() {
  return /** @type{!Array.<!proto.ChatRoomMNotify>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatRoomMNotify, 200));
};


/** @param {!Array.<!proto.ChatRoomMNotify>} value */
proto.ChatRoomDownToUser.prototype.setMultinotifyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 200, value);
};


/**
 * @param {!proto.ChatRoomMNotify=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatRoomMNotify}
 */
proto.ChatRoomDownToUser.prototype.addMultinotify = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 200, opt_value, proto.ChatRoomMNotify, opt_index);
};


proto.ChatRoomDownToUser.prototype.clearMultinotifyList = function() {
  this.setMultinotifyList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRoomPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRoomPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatRoomPacket.displayName = 'proto.ChatRoomPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRoomPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRoomPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRoomPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: msg.getRoomid_asB64(),
    toServerData: (f = msg.getToServerData()) && proto.ChatRoomUpToServer.toObject(includeInstance, f),
    toUserData: (f = msg.getToUserData()) && proto.ChatRoomDownToUser.toObject(includeInstance, f),
    uuid: jspb.Message.getField(msg, 4),
    clientSn: jspb.Message.getField(msg, 5),
    appid: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRoomPacket}
 */
proto.ChatRoomPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRoomPacket;
  return proto.ChatRoomPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRoomPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRoomPacket}
 */
proto.ChatRoomPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new proto.ChatRoomUpToServer;
      reader.readMessage(value,proto.ChatRoomUpToServer.deserializeBinaryFromReader);
      msg.setToServerData(value);
      break;
    case 3:
      var value = new proto.ChatRoomDownToUser;
      reader.readMessage(value,proto.ChatRoomDownToUser.deserializeBinaryFromReader);
      msg.setToUserData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientSn(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRoomPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRoomPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRoomPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRoomPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToServerData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChatRoomUpToServer.serializeBinaryToWriter
    );
  }
  f = message.getToUserData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ChatRoomDownToUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required bytes roomid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChatRoomPacket.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes roomid = 1;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.ChatRoomPacket.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * required bytes roomid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.ChatRoomPacket.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value */
proto.ChatRoomPacket.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ChatRoomPacket.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatRoomUpToServer to_server_data = 2;
 * @return {?proto.ChatRoomUpToServer}
 */
proto.ChatRoomPacket.prototype.getToServerData = function() {
  return /** @type{?proto.ChatRoomUpToServer} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomUpToServer, 2));
};


/** @param {?proto.ChatRoomUpToServer|undefined} value */
proto.ChatRoomPacket.prototype.setToServerData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ChatRoomPacket.prototype.clearToServerData = function() {
  this.setToServerData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasToServerData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChatRoomDownToUser to_user_data = 3;
 * @return {?proto.ChatRoomDownToUser}
 */
proto.ChatRoomPacket.prototype.getToUserData = function() {
  return /** @type{?proto.ChatRoomDownToUser} */ (
    jspb.Message.getWrapperField(this, proto.ChatRoomDownToUser, 3));
};


/** @param {?proto.ChatRoomDownToUser|undefined} value */
proto.ChatRoomPacket.prototype.setToUserData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ChatRoomPacket.prototype.clearToUserData = function() {
  this.setToUserData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasToUserData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string uuid = 4;
 * @return {string}
 */
proto.ChatRoomPacket.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ChatRoomPacket.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ChatRoomPacket.prototype.clearUuid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 client_sn = 5;
 * @return {number}
 */
proto.ChatRoomPacket.prototype.getClientSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ChatRoomPacket.prototype.setClientSn = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ChatRoomPacket.prototype.clearClientSn = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasClientSn = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 appid = 6;
 * @return {number}
 */
proto.ChatRoomPacket.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ChatRoomPacket.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ChatRoomPacket.prototype.clearAppid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ChatRoomPacket.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto);
